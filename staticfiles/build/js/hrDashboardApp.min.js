/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(34);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _hrDashboardView = __webpack_require__(245);

	var _hrDashboardView2 = _interopRequireDefault(_hrDashboardView);

	var _altContainer = __webpack_require__(201);

	var _altContainer2 = _interopRequireDefault(_altContainer);

	var _hrDashboardStore = __webpack_require__(253);

	var _hrDashboardStore2 = _interopRequireDefault(_hrDashboardStore);

	var _userProfileStore = __webpack_require__(256);

	var _userProfileStore2 = _interopRequireDefault(_userProfileStore);

	var _actions = __webpack_require__(255);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var App = function (_Component) {
	    _inherits(App, _Component);

	    function App(props) {
	        _classCallCheck(this, App);

	        return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	    }

	    _createClass(App, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            _hrDashboardStore2.default.performSearch(1, "");
	            _userProfileStore2.default.performSearch();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                _altContainer2.default,
	                {
	                    actions: {
	                        EmployeeEditAction: _actions.EmployeeEditAction,
	                        EmployeeSearchAction: _actions.EmployeeSearchAction
	                    },
	                    stores: {
	                        AppState: _hrDashboardStore2.default,
	                        ProfileState: _userProfileStore2.default
	                    }
	                },
	                _react2.default.createElement(_hrDashboardView2.default, null)
	            );
	        }
	    }]);

	    return App;
	}(_react.Component);

	_reactDom2.default.render(_react2.default.createElement(App, null), document.getElementById("app"));

/***/ },

/***/ 1:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = require('./lib/React');


/***/ },

/***/ 34:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = require('react/lib/ReactDOM');


/***/ },

/***/ 201:
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable*/
	/**
	 * AltContainer.
	 *
	 * There are many ways to use AltContainer.
	 *
	 * Using the `stores` prop.
	 *
	 * <AltContainer stores={{ FooStore: FooStore }}>
	 *   children get this.props.FooStore.storeData
	 * </AltContainer>
	 *
	 * You can also pass in functions.
	 *
	 * <AltContainer stores={{ FooStore: function () { return { storeData: true } } }}>
	 *   children get this.props.FooStore.storeData
	 * </AltContainer>
	 *
	 * Using the `store` prop.
	 *
	 * <AltContainer store={FooStore}>
	 *   children get this.props.storeData
	 * </AltContainer>
	 *
	 * Passing in `flux` because you're using alt instances
	 *
	 * <AltContainer flux={flux}>
	 *   children get this.props.flux
	 * </AltContainer>
	 *
	 * Using a custom render function.
	 *
	 * <AltContainer
	 *   render={function (props) {
	 *     return <div />;
	 *   }}
	 * />
	 *
	 * Using the `transform` prop.
	 *
	 * <AltContainer
	 *   stores={{ FooStore: FooStore, BarStore: BarStore }}
	 *   transform={function(stores) {
	 *     var FooStore = stores.FooStore;
	 *     var BarStore = stores.BarStore;
	 *     var products =
	 *       FooStore.products
	 *         .slice(0, 10)
	 *         .concat(BarStore.products);
	 *     return { products: products };
	 *   }}
	 * >
	 *   children get this.props.products
	 * </AltContainer>
	 *
	 * Full docs available at http://goatslacker.github.io/alt/
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _objectAssign = __webpack_require__(202);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var id = function id(it) {
	  return it;
	};
	var getStateFromStore = function getStateFromStore(store, props) {
	  return typeof store === 'function' ? store(props).value : store.getState();
	};
	var getStateFromKey = function getStateFromKey(actions, props) {
	  return typeof actions === 'function' ? actions(props) : actions;
	};

	var getStateFromActions = function getStateFromActions(props) {
	  if (props.actions) {
	    return getStateFromKey(props.actions, props);
	  } else {
	    return {};
	  }
	};

	var getInjected = function getInjected(props) {
	  if (props.inject) {
	    return Object.keys(props.inject).reduce(function (obj, key) {
	      obj[key] = getStateFromKey(props.inject[key], props);
	      return obj;
	    }, {});
	  } else {
	    return {};
	  }
	};

	var reduceState = function reduceState(props) {
	  return (0, _objectAssign2['default'])({}, getStateFromStores(props), getStateFromActions(props), getInjected(props));
	};

	var getStateFromStores = function getStateFromStores(props) {
	  var stores = props.stores;
	  if (props.store) {
	    return getStateFromStore(props.store, props);
	  } else if (props.stores) {
	    // If you pass in an array of stores then we are just listening to them
	    // it should be an object then the state is added to the key specified
	    if (!Array.isArray(stores)) {
	      return Object.keys(stores).reduce(function (obj, key) {
	        obj[key] = getStateFromStore(stores[key], props);
	        return obj;
	      }, {});
	    }
	  } else {
	    return {};
	  }
	};

	// TODO need to copy some other contextTypes maybe?
	// what about propTypes?

	var AltContainer = (function (_React$Component) {
	  _inherits(AltContainer, _React$Component);

	  _createClass(AltContainer, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var flux = this.props.flux || this.context.flux;
	      return flux ? { flux: flux } : {};
	    }
	  }], [{
	    key: 'contextTypes',
	    value: {
	      flux: _react2['default'].PropTypes.object
	    },
	    enumerable: true
	  }, {
	    key: 'childContextTypes',
	    value: {
	      flux: _react2['default'].PropTypes.object
	    },
	    enumerable: true
	  }]);

	  function AltContainer(props) {
	    var _this = this;

	    _classCallCheck(this, AltContainer);

	    _get(Object.getPrototypeOf(AltContainer.prototype), 'constructor', this).call(this, props);

	    this.altSetState = function () {
	      _this.setState(reduceState(_this.props));
	    };

	    if (props.stores && props.store) {
	      throw new ReferenceError('Cannot define both store and stores');
	    }

	    this.storeListeners = [];

	    this.state = reduceState(props);
	  }

	  _createClass(AltContainer, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      this._destroySubscriptions();
	      this.setState(reduceState(nextProps));
	      this._registerStores(nextProps);
	      if (this.props.onWillReceiveProps) {
	        this.props.onWillReceiveProps(nextProps, this.props, this.context);
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._registerStores(this.props);
	      if (this.props.onMount) this.props.onMount(this.props, this.context);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._destroySubscriptions();
	      if (this.props.onWillUnmount) {
	        this.props.onWillUnmount(this.props, this.context);
	      }
	    }
	  }, {
	    key: '_registerStores',
	    value: function _registerStores(props) {
	      var _this2 = this;

	      var stores = props.stores;

	      if (props.store) {
	        this._addSubscription(props.store);
	      } else if (props.stores) {
	        if (Array.isArray(stores)) {
	          stores.forEach(function (store) {
	            return _this2._addSubscription(store);
	          });
	        } else {
	          Object.keys(stores).forEach(function (formatter) {
	            _this2._addSubscription(stores[formatter]);
	          });
	        }
	      }
	    }
	  }, {
	    key: '_destroySubscriptions',
	    value: function _destroySubscriptions() {
	      this.storeListeners.forEach(function (storeListener) {
	        return storeListener();
	      });
	    }
	  }, {
	    key: '_addSubscription',
	    value: function _addSubscription(getStore) {
	      var store = typeof getStore === 'function' ? getStore(this.props).store : getStore;

	      this.storeListeners.push(store.listen(this.altSetState));
	    }
	  }, {
	    key: 'getProps',
	    value: function getProps() {
	      var flux = this.props.flux || this.context.flux;
	      var transform = typeof this.props.transform === 'function' ? this.props.transform : id;
	      return transform((0, _objectAssign2['default'])(flux ? { flux: flux } : {}, this.state));
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return this.props.shouldComponentUpdate ? this.props.shouldComponentUpdate(this.getProps(), nextProps, nextState) : true;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;

	      var Node = 'div';
	      var children = this.props.children;

	      // Custom rendering function
	      if (typeof this.props.render === 'function') {
	        return this.props.render(this.getProps());
	      } else if (this.props.component) {
	        return _react2['default'].createElement(this.props.component, this.getProps());
	      }

	      // Does not wrap child in a div if we don't have to.
	      if (Array.isArray(children)) {
	        return _react2['default'].createElement(Node, null, children.map(function (child, i) {
	          return _react2['default'].cloneElement(child, (0, _objectAssign2['default'])({ key: i }, _this3.getProps()));
	        }));
	      } else if (children) {
	        return _react2['default'].cloneElement(children, this.getProps());
	      } else {
	        return _react2['default'].createElement(Node, this.getProps());
	      }
	    }
	  }]);

	  return AltContainer;
	})(_react2['default'].Component);

	exports['default'] = AltContainer;
	module.exports = exports['default'];

/***/ },

/***/ 202:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var defineProperties = __webpack_require__(203);

	var implementation = __webpack_require__(207);
	var getPolyfill = __webpack_require__(211);
	var shim = __webpack_require__(212);

	var polyfill = getPolyfill();

	defineProperties(polyfill, {
		implementation: implementation,
		getPolyfill: getPolyfill,
		shim: shim
	});

	module.exports = polyfill;


/***/ },

/***/ 203:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var keys = __webpack_require__(204);
	var foreach = __webpack_require__(206);
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

	var toStr = Object.prototype.toString;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
	        /* eslint-disable no-unused-vars, no-restricted-syntax */
	        for (var _ in obj) { return false; }
	        /* eslint-enable no-unused-vars, no-restricted-syntax */
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			Object.defineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys(map);
		if (hasSymbols) {
			props = props.concat(Object.getOwnPropertySymbols(map));
		}
		foreach(props, function (name) {
			defineProperty(object, name, map[name], predicates[name]);
		});
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	module.exports = defineProperties;


/***/ },

/***/ 204:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var slice = Array.prototype.slice;
	var isArgs = __webpack_require__(205);
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	var keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};

	keysShim.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				return (Object.keys(arguments) || '').length === 2;
			}(1, 2));
			if (!keysWorksWithArguments) {
				var originalKeys = Object.keys;
				Object.keys = function keys(object) {
					if (isArgs(object)) {
						return originalKeys(slice.call(object));
					} else {
						return originalKeys(object);
					}
				};
			}
		} else {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};

	module.exports = keysShim;


/***/ },

/***/ 205:
/***/ function(module, exports) {

	'use strict';

	var toStr = Object.prototype.toString;

	module.exports = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};


/***/ },

/***/ 206:
/***/ function(module, exports) {

	
	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;

	module.exports = function forEach (obj, fn, ctx) {
	    if (toString.call(fn) !== '[object Function]') {
	        throw new TypeError('iterator must be a function');
	    }
	    var l = obj.length;
	    if (l === +l) {
	        for (var i = 0; i < l; i++) {
	            fn.call(ctx, obj[i], i, obj);
	        }
	    } else {
	        for (var k in obj) {
	            if (hasOwn.call(obj, k)) {
	                fn.call(ctx, obj[k], k, obj);
	            }
	        }
	    }
	};



/***/ },

/***/ 207:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// modified from https://github.com/es-shims/es6-shim
	var keys = __webpack_require__(204);
	var bind = __webpack_require__(208);
	var canBeObject = function (obj) {
		return typeof obj !== 'undefined' && obj !== null;
	};
	var hasSymbols = __webpack_require__(210)();
	var toObject = Object;
	var push = bind.call(Function.call, Array.prototype.push);
	var propIsEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);
	var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;

	module.exports = function assign(target, source1) {
		if (!canBeObject(target)) { throw new TypeError('target must be an object'); }
		var objTarget = toObject(target);
		var s, source, i, props, syms, value, key;
		for (s = 1; s < arguments.length; ++s) {
			source = toObject(arguments[s]);
			props = keys(source);
			var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
			if (getSymbols) {
				syms = getSymbols(source);
				for (i = 0; i < syms.length; ++i) {
					key = syms[i];
					if (propIsEnumerable(source, key)) {
						push(props, key);
					}
				}
			}
			for (i = 0; i < props.length; ++i) {
				key = props[i];
				value = source[key];
				if (propIsEnumerable(source, key)) {
					objTarget[key] = value;
				}
			}
		}
		return objTarget;
	};


/***/ },

/***/ 208:
/***/ function(module, exports, __webpack_require__) {

	var implementation = __webpack_require__(209);

	module.exports = Function.prototype.bind || implementation;


/***/ },

/***/ 209:
/***/ function(module, exports) {

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice = Array.prototype.slice;
	var toStr = Object.prototype.toString;
	var funcType = '[object Function]';

	module.exports = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};


/***/ },

/***/ 210:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var keys = __webpack_require__(204);

	module.exports = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; }
		if (keys(obj).length !== 0) { return false; }
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};


/***/ },

/***/ 211:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var implementation = __webpack_require__(207);

	var lacksProperEnumerationOrder = function () {
		if (!Object.assign) {
			return false;
		}
		// v8, specifically in node 4.x, has a bug with incorrect property enumeration order
		// note: this does not detect the bug unless there's 20 characters
		var str = 'abcdefghijklmnopqrst';
		var letters = str.split('');
		var map = {};
		for (var i = 0; i < letters.length; ++i) {
			map[letters[i]] = letters[i];
		}
		var obj = Object.assign({}, map);
		var actual = '';
		for (var k in obj) {
			actual += k;
		}
		return str !== actual;
	};

	var assignHasPendingExceptions = function () {
		if (!Object.assign || !Object.preventExtensions) {
			return false;
		}
		// Firefox 37 still has "pending exception" logic in its Object.assign implementation,
		// which is 72% slower than our shim, and Firefox 40's native implementation.
		var thrower = Object.preventExtensions({ 1: 2 });
		try {
			Object.assign(thrower, 'xy');
		} catch (e) {
			return thrower[1] === 'y';
		}
		return false;
	};

	module.exports = function getPolyfill() {
		if (!Object.assign) {
			return implementation;
		}
		if (lacksProperEnumerationOrder()) {
			return implementation;
		}
		if (assignHasPendingExceptions()) {
			return implementation;
		}
		return Object.assign;
	};


/***/ },

/***/ 212:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__(203);
	var getPolyfill = __webpack_require__(211);

	module.exports = function shimAssign() {
		var polyfill = getPolyfill();
		define(
			Object,
			{ assign: polyfill },
			{ assign: function () { return Object.assign !== polyfill; } }
		);
		return polyfill;
	};


/***/ },

/***/ 215:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _csrfToken = __webpack_require__(216);

	var _csrfToken2 = _interopRequireDefault(_csrfToken);

	var _superagent = __webpack_require__(217);

	var _superagent2 = _interopRequireDefault(_superagent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var API = function () {
		function API() {
			_classCallCheck(this, API);
		}

		_createClass(API, [{
			key: 'post',
			value: function post(url, data) {
				var q = _superagent2.default.post(url);
				return this.execute(q, data);
			}
		}, {
			key: 'put',
			value: function put(url, data) {
				var q = _superagent2.default.put(url);
				return this.execute(q, data);
			}
		}, {
			key: 'patch',
			value: function patch(url, data) {
				var q = _superagent2.default.patch(url);
				return this.execute(q, data);
			}
		}, {
			key: 'get',
			value: function get(url, params) {
				var q = _superagent2.default.get(url);
				if (params) {
					q = q.query(params);
				}
				return this.execute(q);
			}
		}, {
			key: 'delete',
			value: function _delete(url) {
				var q = _superagent2.default.delete(url);
				return this.execute(q);
			}
		}, {
			key: 'execute',
			value: function execute(q, data) {
				var result = q;
				if (data) {
					result = result.send(data);
				}
				result = result.set('X-CSRFToken', _csrfToken2.default);
				return result;
			}
		}]);

		return API;
	}();

	exports.default = new API();

/***/ },

/***/ 216:
/***/ function(module, exports) {

	'use strict';

	function getCookie(name) {
	    var cookieValue = null;
	    if (document.cookie && document.cookie != '') {
	        var cookies = document.cookie.split(';');
	        for (var i = 0; i < cookies.length; i++) {
	            var cookie = jQuery.trim(cookies[i]);
	            // Does this cookie string begin with the name we want?
	            if (cookie.substring(0, name.length + 1) == name + '=') {
	                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
	                break;
	            }
	        }
	    }
	    return cookieValue;
	}
	var csrftoken = getCookie('csrftoken');

	module.exports = csrftoken;

/***/ },

/***/ 217:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Root reference for iframes.
	 */

	var root;
	if (typeof window !== 'undefined') { // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') { // Web Worker
	  root = self;
	} else { // Other environments
	  console.warn("Using browser-only version of superagent in non-browser environment");
	  root = this;
	}

	var Emitter = __webpack_require__(218);
	var requestBase = __webpack_require__(219);
	var isObject = __webpack_require__(220);

	/**
	 * Noop.
	 */

	function noop(){};

	/**
	 * Expose `request`.
	 */

	var request = module.exports = __webpack_require__(221).bind(null, Request);

	/**
	 * Determine XHR.
	 */

	request.getXHR = function () {
	  if (root.XMLHttpRequest
	      && (!root.location || 'file:' != root.location.protocol
	          || !root.ActiveXObject)) {
	    return new XMLHttpRequest;
	  } else {
	    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
	  }
	  throw Error("Browser-only verison of superagent could not find XHR");
	};

	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */

	var trim = ''.trim
	  ? function(s) { return s.trim(); }
	  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */

	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    pushEncodedKeyValuePair(pairs, key, obj[key]);
	  }
	  return pairs.join('&');
	}

	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */

	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (val != null) {
	    if (Array.isArray(val)) {
	      val.forEach(function(v) {
	        pushEncodedKeyValuePair(pairs, key, v);
	      });
	    } else if (isObject(val)) {
	      for(var subkey in val) {
	        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
	      }
	    } else {
	      pairs.push(encodeURIComponent(key)
	        + '=' + encodeURIComponent(val));
	    }
	  } else if (val === null) {
	    pairs.push(encodeURIComponent(key));
	  }
	}

	/**
	 * Expose serialization method.
	 */

	 request.serializeObject = serialize;

	 /**
	  * Parse the given x-www-form-urlencoded `str`.
	  *
	  * @param {String} str
	  * @return {Object}
	  * @api private
	  */

	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var pair;
	  var pos;

	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    pos = pair.indexOf('=');
	    if (pos == -1) {
	      obj[decodeURIComponent(pair)] = '';
	    } else {
	      obj[decodeURIComponent(pair.slice(0, pos))] =
	        decodeURIComponent(pair.slice(pos + 1));
	    }
	  }

	  return obj;
	}

	/**
	 * Expose parser.
	 */

	request.parseString = parseString;

	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */

	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};

	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */

	 request.serialize = {
	   'application/x-www-form-urlencoded': serialize,
	   'application/json': JSON.stringify
	 };

	 /**
	  * Default parsers.
	  *
	  *     superagent.parse['application/xml'] = function(str){
	  *       return { object parsed from str };
	  *     };
	  *
	  */

	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};

	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;

	  lines.pop(); // trailing CRLF

	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }

	  return fields;
	}

	/**
	 * Check if `mime` is json or has +json structured syntax suffix.
	 *
	 * @param {String} mime
	 * @return {Boolean}
	 * @api private
	 */

	function isJSON(mime) {
	  return /[\/+]json\b/.test(mime);
	}

	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function type(str){
	  return str.split(/ *; */).shift();
	};

	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function params(str){
	  return str.split(/ *; */).reduce(function(obj, str){
	    var parts = str.split(/ *= */),
	        key = parts.shift(),
	        val = parts.shift();

	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};

	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */

	function Response(req, options) {
	  options = options || {};
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
	     ? this.xhr.responseText
	     : null;
	  this.statusText = this.req.xhr.statusText;
	  this._setStatusProperties(this.xhr.status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this._setHeaderProperties(this.header);
	  this.body = this.req.method != 'HEAD'
	    ? this._parseBody(this.text ? this.text : this.xhr.response)
	    : null;
	}

	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */

	Response.prototype.get = function(field){
	  return this.header[field.toLowerCase()];
	};

	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */

	Response.prototype._setHeaderProperties = function(header){
	  // content-type
	  var ct = this.header['content-type'] || '';
	  this.type = type(ct);

	  // params
	  var obj = params(ct);
	  for (var key in obj) this[key] = obj[key];
	};

	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */

	Response.prototype._parseBody = function(str){
	  var parse = request.parse[this.type];
	  if (!parse && isJSON(this.type)) {
	    parse = request.parse['application/json'];
	  }
	  return parse && str && (str.length || str instanceof Object)
	    ? parse(str)
	    : null;
	};

	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */

	Response.prototype._setStatusProperties = function(status){
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }

	  var type = status / 100 | 0;

	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;

	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = (4 == type || 5 == type)
	    ? this.toError()
	    : false;

	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.notFound = 404 == status;
	  this.forbidden = 403 == status;
	};

	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */

	Response.prototype.toError = function(){
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;

	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;

	  return err;
	};

	/**
	 * Expose `Response`.
	 */

	request.Response = Response;

	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */

	function Request(method, url) {
	  var self = this;
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {}; // preserves header name case
	  this._header = {}; // coerces header names to lowercase
	  this.on('end', function(){
	    var err = null;
	    var res = null;

	    try {
	      res = new Response(self);
	    } catch(e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      // issue #675: return the raw response if the response parsing fails
	      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
	      // issue #876: return the http status code if the response parsing fails
	      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;
	      return self.callback(err);
	    }

	    self.emit('response', res);

	    var new_err;
	    try {
	      if (res.status < 200 || res.status >= 300) {
	        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	        new_err.original = err;
	        new_err.response = res;
	        new_err.status = res.status;
	      }
	    } catch(e) {
	      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android
	    }

	    // #1000 don't catch errors from the callback to avoid double calling it
	    if (new_err) {
	      self.callback(new_err, res);
	    } else {
	      self.callback(null, res);
	    }
	  });
	}

	/**
	 * Mixin `Emitter` and `requestBase`.
	 */

	Emitter(Request.prototype);
	for (var key in requestBase) {
	  Request.prototype[key] = requestBase[key];
	}

	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.type = function(type){
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};

	/**
	 * Set responseType to `val`. Presently valid responseTypes are 'blob' and
	 * 'arraybuffer'.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .responseType('blob')
	 *        .end(callback);
	 *
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.responseType = function(val){
	  this._responseType = val;
	  return this;
	};

	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.accept = function(type){
	  this.set('Accept', request.types[type] || type);
	  return this;
	};

	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} pass
	 * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.auth = function(user, pass, options){
	  if (!options) {
	    options = {
	      type: 'basic'
	    }
	  }

	  switch (options.type) {
	    case 'basic':
	      var str = btoa(user + ':' + pass);
	      this.set('Authorization', 'Basic ' + str);
	    break;

	    case 'auto':
	      this.username = user;
	      this.password = pass;
	    break;
	  }
	  return this;
	};

	/**
	* Add query-string `val`.
	*
	* Examples:
	*
	*   request.get('/shoes')
	*     .query('size=10')
	*     .query({ color: 'blue' })
	*
	* @param {Object|String} val
	* @return {Request} for chaining
	* @api public
	*/

	Request.prototype.query = function(val){
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};

	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `filename`.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String} filename
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.attach = function(field, file, filename){
	  this._getFormData().append(field, file, filename || file.name);
	  return this;
	};

	Request.prototype._getFormData = function(){
	  if (!this._formData) {
	    this._formData = new root.FormData();
	  }
	  return this._formData;
	};

	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */

	Request.prototype.callback = function(err, res){
	  var fn = this._callback;
	  this.clearTimeout();
	  fn(err, res);
	};

	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */

	Request.prototype.crossDomainError = function(){
	  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
	  err.crossDomain = true;

	  err.status = this.status;
	  err.method = this.method;
	  err.url = this.url;

	  this.callback(err);
	};

	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */

	Request.prototype._timeoutError = function(){
	  var timeout = this._timeout;
	  var err = new Error('timeout of ' + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  this.callback(err);
	};

	/**
	 * Compose querystring to append to req.url
	 *
	 * @api private
	 */

	Request.prototype._appendQueryString = function(){
	  var query = this._query.join('&');
	  if (query) {
	    this.url += ~this.url.indexOf('?')
	      ? '&' + query
	      : '?' + query;
	  }
	};

	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.end = function(fn){
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var timeout = this._timeout;
	  var data = this._formData || this._data;

	  // store callback
	  this._callback = fn || noop;

	  // state change
	  xhr.onreadystatechange = function(){
	    if (4 != xhr.readyState) return;

	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try { status = xhr.status } catch(e) { status = 0; }

	    if (0 == status) {
	      if (self.timedout) return self._timeoutError();
	      if (self._aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };

	  // progress
	  var handleProgress = function(direction, e) {
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    e.direction = direction;
	    self.emit('progress', e);
	  }
	  if (this.hasListeners('progress')) {
	    try {
	      xhr.onprogress = handleProgress.bind(null, 'download');
	      if (xhr.upload) {
	        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
	      }
	    } catch(e) {
	      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	      // Reported here:
	      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
	    }
	  }

	  // timeout
	  if (timeout && !this._timer) {
	    this._timer = setTimeout(function(){
	      self.timedout = true;
	      self.abort();
	    }, timeout);
	  }

	  // querystring
	  this._appendQueryString();

	  // initiate request
	  if (this.username && this.password) {
	    xhr.open(this.method, this.url, true, this.username, this.password);
	  } else {
	    xhr.open(this.method, this.url, true);
	  }

	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;

	  // body
	  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
	    // serialize stuff
	    var contentType = this._header['content-type'];
	    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
	    if (serialize) data = serialize(data);
	  }

	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	    xhr.setRequestHeader(field, this.header[field]);
	  }

	  if (this._responseType) {
	    xhr.responseType = this._responseType;
	  }

	  // send stuff
	  this.emit('request', this);

	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};


	/**
	 * Expose `Request`.
	 */

	request.Request = Request;

	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */

	request.get = function(url, data, fn){
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */

	request.head = function(url, data, fn){
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * OPTIONS query to `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */

	request.options = function(url, data, fn){
	  var req = request('OPTIONS', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * DELETE `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */

	function del(url, fn){
	  var req = request('DELETE', url);
	  if (fn) req.end(fn);
	  return req;
	};

	request['del'] = del;
	request['delete'] = del;

	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} [data]
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */

	request.patch = function(url, data, fn){
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} [data]
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */

	request.post = function(url, data, fn){
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */

	request.put = function(url, data, fn){
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};


/***/ },

/***/ 218:
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */

	if (true) {
	  module.exports = Emitter;
	}

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },

/***/ 219:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module of mixed-in functions shared between node and client code
	 */
	var isObject = __webpack_require__(220);

	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.clearTimeout = function _clearTimeout(){
	  this._timeout = 0;
	  clearTimeout(this._timer);
	  return this;
	};

	/**
	 * Override default response body parser
	 *
	 * This function will be called to convert incoming data into request.body
	 *
	 * @param {Function}
	 * @api public
	 */

	exports.parse = function parse(fn){
	  this._parser = fn;
	  return this;
	};

	/**
	 * Override default request body serializer
	 *
	 * This function will be called to convert data set via .send or .attach into payload to send
	 *
	 * @param {Function}
	 * @api public
	 */

	exports.serialize = function serialize(fn){
	  this._serializer = fn;
	  return this;
	};

	/**
	 * Set timeout to `ms`.
	 *
	 * @param {Number} ms
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.timeout = function timeout(ms){
	  this._timeout = ms;
	  return this;
	};

	/**
	 * Promise support
	 *
	 * @param {Function} resolve
	 * @param {Function} reject
	 * @return {Request}
	 */

	exports.then = function then(resolve, reject) {
	  if (!this._fullfilledPromise) {
	    var self = this;
	    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
	      self.end(function(err, res){
	        if (err) innerReject(err); else innerResolve(res);
	      });
	    });
	  }
	  return this._fullfilledPromise.then(resolve, reject);
	}

	exports.catch = function(cb) {
	  return this.then(undefined, cb);
	};

	/**
	 * Allow for extension
	 */

	exports.use = function use(fn) {
	  fn(this);
	  return this;
	}


	/**
	 * Get request header `field`.
	 * Case-insensitive.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */

	exports.get = function(field){
	  return this._header[field.toLowerCase()];
	};

	/**
	 * Get case-insensitive header `field` value.
	 * This is a deprecated internal API. Use `.get(field)` instead.
	 *
	 * (getHeader is no longer used internally by the superagent code base)
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 * @deprecated
	 */

	exports.getHeader = exports.get;

	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 * Case-insensitive.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.set = function(field, val){
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};

	/**
	 * Remove header `field`.
	 * Case-insensitive.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 */
	exports.unset = function(field){
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};

	/**
	 * Write the field `name` and `val`, or multiple fields with one object
	 * for "multipart/form-data" request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 *
	 * request.post('/upload')
	 *   .field({ foo: 'bar', baz: 'qux' })
	 *   .end(callback);
	 * ```
	 *
	 * @param {String|Object} name
	 * @param {String|Blob|File|Buffer|fs.ReadStream} val
	 * @return {Request} for chaining
	 * @api public
	 */
	exports.field = function(name, val) {

	  // name should be either a string or an object.
	  if (null === name ||  undefined === name) {
	    throw new Error('.field(name, val) name can not be empty');
	  }

	  if (isObject(name)) {
	    for (var key in name) {
	      this.field(key, name[key]);
	    }
	    return this;
	  }

	  // val should be defined now
	  if (null === val || undefined === val) {
	    throw new Error('.field(name, val) val can not be empty');
	  }
	  this._getFormData().append(name, val);
	  return this;
	};

	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */
	exports.abort = function(){
	  if (this._aborted) {
	    return this;
	  }
	  this._aborted = true;
	  this.xhr && this.xhr.abort(); // browser
	  this.req && this.req.abort(); // node
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};

	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */

	exports.withCredentials = function(){
	  // This is browser-only functionality. Node side is no-op.
	  this._withCredentials = true;
	  return this;
	};

	/**
	 * Set the max redirects to `n`. Does noting in browser XHR implementation.
	 *
	 * @param {Number} n
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.redirects = function(n){
	  this._maxRedirects = n;
	  return this;
	};

	/**
	 * Convert to a plain javascript object (not JSON string) of scalar properties.
	 * Note as this method is designed to return a useful non-this value,
	 * it cannot be chained.
	 *
	 * @return {Object} describing method, url, and data of this request
	 * @api public
	 */

	exports.toJSON = function(){
	  return {
	    method: this.method,
	    url: this.url,
	    data: this._data,
	    headers: this._header
	  };
	};

	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * TODO: future proof, move to compoent land
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	exports._isHost = function _isHost(obj) {
	  var str = {}.toString.call(obj);

	  switch (str) {
	    case '[object File]':
	    case '[object Blob]':
	    case '[object FormData]':
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Send `data` as the request body, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	 *      request.post('/user')
	 *        .send('name=tobi')
	 *        .send('species=ferret')
	 *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.send = function(data){
	  var obj = isObject(data);
	  var type = this._header['content-type'];

	  // merge
	  if (obj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    // default to x-www-form-urlencoded
	    if (!type) this.type('form');
	    type = this._header['content-type'];
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data
	        ? this._data + '&' + data
	        : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }

	  if (!obj || this._isHost(data)) return this;

	  // default to json
	  if (!type) this.type('json');
	  return this;
	};


/***/ },

/***/ 220:
/***/ function(module, exports) {

	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isObject(obj) {
	  return null !== obj && 'object' === typeof obj;
	}

	module.exports = isObject;


/***/ },

/***/ 221:
/***/ function(module, exports) {

	// The node and browser modules expose versions of this with the
	// appropriate constructor function bound as first argument
	/**
	 * Issue a request:
	 *
	 * Examples:
	 *
	 *    request('GET', '/users').end(callback)
	 *    request('/users').end(callback)
	 *    request('/users', callback)
	 *
	 * @param {String} method
	 * @param {String|Function} url or callback
	 * @return {Request}
	 * @api public
	 */

	function request(RequestConstructor, method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new RequestConstructor('GET', method).end(url);
	  }

	  // url first
	  if (2 == arguments.length) {
	    return new RequestConstructor('GET', method);
	  }

	  return new RequestConstructor(method, url);
	}

	module.exports = request;


/***/ },

/***/ 223:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _alt = __webpack_require__(224);

	var _alt2 = _interopRequireDefault(_alt);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = new _alt2.default();

/***/ },

/***/ 224:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _flux = require('flux');

	var _StateFunctions = require('./utils/StateFunctions');

	var StateFunctions = _interopRequireWildcard(_StateFunctions);

	var _functions = require('./functions');

	var fn = _interopRequireWildcard(_functions);

	var _store = require('./store');

	var store = _interopRequireWildcard(_store);

	var _AltUtils = require('./utils/AltUtils');

	var utils = _interopRequireWildcard(_AltUtils);

	var _actions = require('./actions');

	var _actions2 = _interopRequireDefault(_actions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /* global window */


	var Alt = function () {
	  function Alt() {
	    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    _classCallCheck(this, Alt);

	    this.config = config;
	    this.serialize = config.serialize || JSON.stringify;
	    this.deserialize = config.deserialize || JSON.parse;
	    this.dispatcher = config.dispatcher || new _flux.Dispatcher();
	    this.batchingFunction = config.batchingFunction || function (callback) {
	      return callback();
	    };
	    this.actions = { global: {} };
	    this.stores = {};
	    this.storeTransforms = config.storeTransforms || [];
	    this.trapAsync = false;
	    this._actionsRegistry = {};
	    this._initSnapshot = {};
	    this._lastSnapshot = {};
	  }

	  Alt.prototype.dispatch = function () {
	    function dispatch(action, data, details) {
	      var _this = this;

	      this.batchingFunction(function () {
	        var id = Math.random().toString(18).substr(2, 16);

	        // support straight dispatching of FSA-style actions
	        if (action.hasOwnProperty('type') && action.hasOwnProperty('payload')) {
	          var fsaDetails = {
	            id: action.type,
	            namespace: action.type,
	            name: action.type
	          };
	          return _this.dispatcher.dispatch(utils.fsa(id, action.type, action.payload, fsaDetails));
	        }

	        if (action.id && action.dispatch) {
	          return utils.dispatch(id, action, data, _this);
	        }

	        return _this.dispatcher.dispatch(utils.fsa(id, action, data, details));
	      });
	    }

	    return dispatch;
	  }();

	  Alt.prototype.createUnsavedStore = function () {
	    function createUnsavedStore(StoreModel) {
	      var key = StoreModel.displayName || '';
	      store.createStoreConfig(this.config, StoreModel);
	      var Store = store.transformStore(this.storeTransforms, StoreModel);

	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);
	    }

	    return createUnsavedStore;
	  }();

	  Alt.prototype.createStore = function () {
	    function createStore(StoreModel, iden) {
	      var key = iden || StoreModel.displayName || StoreModel.name || '';
	      store.createStoreConfig(this.config, StoreModel);
	      var Store = store.transformStore(this.storeTransforms, StoreModel);

	      /* istanbul ignore next */
	      if (module.hot) delete this.stores[key];

	      if (this.stores[key] || !key) {
	        if (this.stores[key]) {
	          utils.warn('A store named ' + String(key) + ' already exists, double check your store ' + 'names or pass in your own custom identifier for each store');
	        } else {
	          utils.warn('Store name was not specified');
	        }

	        key = utils.uid(this.stores, key);
	      }

	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      var storeInstance = fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);

	      this.stores[key] = storeInstance;
	      StateFunctions.saveInitialSnapshot(this, key);

	      return storeInstance;
	    }

	    return createStore;
	  }();

	  Alt.prototype.generateActions = function () {
	    function generateActions() {
	      var actions = { name: 'global' };

	      for (var _len3 = arguments.length, actionNames = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        actionNames[_key3] = arguments[_key3];
	      }

	      return this.createActions(actionNames.reduce(function (obj, action) {
	        obj[action] = utils.dispatchIdentity;
	        return obj;
	      }, actions));
	    }

	    return generateActions;
	  }();

	  Alt.prototype.createAction = function () {
	    function createAction(name, implementation, obj) {
	      return (0, _actions2.default)(this, 'global', name, implementation, obj);
	    }

	    return createAction;
	  }();

	  Alt.prototype.createActions = function () {
	    function createActions(ActionsClass) {
	      var _this3 = this;

	      var exportObj = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      var actions = {};
	      var key = utils.uid(this._actionsRegistry, ActionsClass.displayName || ActionsClass.name || 'Unknown');

	      if (fn.isFunction(ActionsClass)) {
	        fn.assign(actions, utils.getPrototypeChain(ActionsClass));

	        var ActionsGenerator = function (_ActionsClass) {
	          _inherits(ActionsGenerator, _ActionsClass);

	          function ActionsGenerator() {
	            _classCallCheck(this, ActionsGenerator);

	            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	              args[_key5] = arguments[_key5];
	            }

	            return _possibleConstructorReturn(this, _ActionsClass.call.apply(_ActionsClass, [this].concat(args)));
	          }

	          ActionsGenerator.prototype.generateActions = function () {
	            function generateActions() {
	              for (var _len6 = arguments.length, actionNames = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	                actionNames[_key6] = arguments[_key6];
	              }

	              actionNames.forEach(function (actionName) {
	                actions[actionName] = utils.dispatchIdentity;
	              });
	            }

	            return generateActions;
	          }();

	          return ActionsGenerator;
	        }(ActionsClass);

	        for (var _len4 = arguments.length, argsForConstructor = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
	          argsForConstructor[_key4 - 2] = arguments[_key4];
	        }

	        fn.assign(actions, new (Function.prototype.bind.apply(ActionsGenerator, [null].concat(argsForConstructor)))());
	      } else {
	        fn.assign(actions, ActionsClass);
	      }

	      this.actions[key] = this.actions[key] || {};

	      fn.eachObject(function (actionName, action) {
	        if (!fn.isFunction(action)) {
	          exportObj[actionName] = action;
	          return;
	        }

	        // create the action
	        exportObj[actionName] = (0, _actions2.default)(_this3, key, actionName, action, exportObj);

	        // generate a constant
	        var constant = utils.formatAsConstant(actionName);
	        exportObj[constant] = exportObj[actionName].id;
	      }, [actions]);

	      return exportObj;
	    }

	    return createActions;
	  }();

	  Alt.prototype.takeSnapshot = function () {
	    function takeSnapshot() {
	      for (var _len7 = arguments.length, storeNames = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        storeNames[_key7] = arguments[_key7];
	      }

	      var state = StateFunctions.snapshot(this, storeNames);
	      fn.assign(this._lastSnapshot, state);
	      return this.serialize(state);
	    }

	    return takeSnapshot;
	  }();

	  Alt.prototype.rollback = function () {
	    function rollback() {
	      StateFunctions.setAppState(this, this.serialize(this._lastSnapshot), function (storeInst) {
	        storeInst.lifecycle('rollback');
	        storeInst.emitChange();
	      });
	    }

	    return rollback;
	  }();

	  Alt.prototype.recycle = function () {
	    function recycle() {
	      for (var _len8 = arguments.length, storeNames = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
	        storeNames[_key8] = arguments[_key8];
	      }

	      var initialSnapshot = storeNames.length ? StateFunctions.filterSnapshots(this, this._initSnapshot, storeNames) : this._initSnapshot;

	      StateFunctions.setAppState(this, this.serialize(initialSnapshot), function (storeInst) {
	        storeInst.lifecycle('init');
	        storeInst.emitChange();
	      });
	    }

	    return recycle;
	  }();

	  Alt.prototype.flush = function () {
	    function flush() {
	      var state = this.serialize(StateFunctions.snapshot(this));
	      this.recycle();
	      return state;
	    }

	    return flush;
	  }();

	  Alt.prototype.bootstrap = function () {
	    function bootstrap(data) {
	      StateFunctions.setAppState(this, data, function (storeInst, state) {
	        storeInst.lifecycle('bootstrap', state);
	        storeInst.emitChange();
	      });
	    }

	    return bootstrap;
	  }();

	  Alt.prototype.prepare = function () {
	    function prepare(storeInst, payload) {
	      var data = {};
	      if (!storeInst.displayName) {
	        throw new ReferenceError('Store provided does not have a name');
	      }
	      data[storeInst.displayName] = payload;
	      return this.serialize(data);
	    }

	    return prepare;
	  }();

	  // Instance type methods for injecting alt into your application as context

	  Alt.prototype.addActions = function () {
	    function addActions(name, ActionsClass) {
	      for (var _len9 = arguments.length, args = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {
	        args[_key9 - 2] = arguments[_key9];
	      }

	      this.actions[name] = Array.isArray(ActionsClass) ? this.generateActions.apply(this, ActionsClass) : this.createActions.apply(this, [ActionsClass].concat(args));
	    }

	    return addActions;
	  }();

	  Alt.prototype.addStore = function () {
	    function addStore(name, StoreModel) {
	      for (var _len10 = arguments.length, args = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {
	        args[_key10 - 2] = arguments[_key10];
	      }

	      this.createStore.apply(this, [StoreModel, name].concat(args));
	    }

	    return addStore;
	  }();

	  Alt.prototype.getActions = function () {
	    function getActions(name) {
	      return this.actions[name];
	    }

	    return getActions;
	  }();

	  Alt.prototype.getStore = function () {
	    function getStore(name) {
	      return this.stores[name];
	    }

	    return getStore;
	  }();

	  Alt.debug = function () {
	    function debug(name, alt, win) {
	      var key = 'alt.js.org';
	      var context = win;
	      if (!context && typeof window !== 'undefined') {
	        context = window;
	      }
	      if (typeof context !== 'undefined') {
	        context[key] = context[key] || [];
	        context[key].push({ name: name, alt: alt });
	      }
	      return alt;
	    }

	    return debug;
	  }();

	  return Alt;
	}();

	exports.default = Alt;
	module.exports = exports['default'];

/***/ },

/***/ 228:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.setAppState = setAppState;
	exports.snapshot = snapshot;
	exports.saveInitialSnapshot = saveInitialSnapshot;
	exports.filterSnapshots = filterSnapshots;

	var _functions = __webpack_require__(229);

	var fn = _interopRequireWildcard(_functions);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function setAppState(instance, data, onStore) {
	  var obj = instance.deserialize(data);
	  fn.eachObject(function (key, value) {
	    var store = instance.stores[key];
	    if (store) {
	      (function () {
	        var config = store.StoreModel.config;

	        var state = store.state;
	        if (config.onDeserialize) obj[key] = config.onDeserialize(value) || value;
	        if (fn.isMutableObject(state)) {
	          fn.eachObject(function (k) {
	            return delete state[k];
	          }, [state]);
	          fn.assign(state, obj[key]);
	        } else {
	          store.state = obj[key];
	        }
	        onStore(store, store.state);
	      })();
	    }
	  }, [obj]);
	}

	function snapshot(instance) {
	  var storeNames = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

	  var stores = storeNames.length ? storeNames : Object.keys(instance.stores);
	  return stores.reduce(function (obj, storeHandle) {
	    var storeName = storeHandle.displayName || storeHandle;
	    var store = instance.stores[storeName];
	    var config = store.StoreModel.config;

	    store.lifecycle('snapshot');
	    var customSnapshot = config.onSerialize && config.onSerialize(store.state);
	    obj[storeName] = customSnapshot ? customSnapshot : store.getState();
	    return obj;
	  }, {});
	}

	function saveInitialSnapshot(instance, key) {
	  var state = instance.deserialize(instance.serialize(instance.stores[key].state));
	  instance._initSnapshot[key] = state;
	  instance._lastSnapshot[key] = state;
	}

	function filterSnapshots(instance, state, stores) {
	  return stores.reduce(function (obj, store) {
	    var storeName = store.displayName || store;
	    if (!state[storeName]) {
	      throw new ReferenceError(String(storeName) + ' is not a valid store');
	    }
	    obj[storeName] = state[storeName];
	    return obj;
	  }, {});
	}

/***/ },

/***/ 229:
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isMutableObject = isMutableObject;
	exports.eachObject = eachObject;
	exports.assign = assign;
	var isFunction = exports.isFunction = function isFunction(x) {
	  return typeof x === 'function';
	};

	function isMutableObject(target) {
	  var Ctor = target.constructor;

	  return !!target && Object.prototype.toString.call(target) === '[object Object]' && isFunction(Ctor) && !Object.isFrozen(target) && (Ctor instanceof Ctor || target.type === 'AltStore');
	}

	function eachObject(f, o) {
	  o.forEach(function (from) {
	    Object.keys(Object(from)).forEach(function (key) {
	      f(key, from[key]);
	    });
	  });
	}

	function assign(target) {
	  for (var _len = arguments.length, source = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    source[_key - 1] = arguments[_key];
	  }

	  eachObject(function (key, value) {
	    return target[key] = value;
	  }, source);
	  return target;
	}

/***/ },

/***/ 230:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createStoreConfig = createStoreConfig;
	exports.transformStore = transformStore;
	exports.createStoreFromObject = createStoreFromObject;
	exports.createStoreFromClass = createStoreFromClass;

	var _AltUtils = __webpack_require__(231);

	var utils = _interopRequireWildcard(_AltUtils);

	var _functions = __webpack_require__(229);

	var fn = _interopRequireWildcard(_functions);

	var _AltStore = __webpack_require__(232);

	var _AltStore2 = _interopRequireDefault(_AltStore);

	var _StoreMixin = __webpack_require__(234);

	var _StoreMixin2 = _interopRequireDefault(_StoreMixin);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function doSetState(store, storeInstance, state) {
	  if (!state) {
	    return;
	  }

	  var config = storeInstance.StoreModel.config;


	  var nextState = fn.isFunction(state) ? state(storeInstance.state) : state;

	  storeInstance.state = config.setState.call(store, storeInstance.state, nextState);

	  if (!store.alt.dispatcher.isDispatching()) {
	    store.emitChange();
	  }
	}

	function createPrototype(proto, alt, key, extras) {
	  return fn.assign(proto, _StoreMixin2.default, {
	    displayName: key,
	    alt: alt,
	    dispatcher: alt.dispatcher,
	    preventDefault: function () {
	      function preventDefault() {
	        this.getInstance().preventDefault = true;
	      }

	      return preventDefault;
	    }(),

	    boundListeners: [],
	    lifecycleEvents: {},
	    actionListeners: {},
	    publicMethods: {},
	    handlesOwnErrors: false
	  }, extras);
	}

	function createStoreConfig(globalConfig, StoreModel) {
	  StoreModel.config = fn.assign({
	    getState: function () {
	      function getState(state) {
	        if (Array.isArray(state)) {
	          return state.slice();
	        } else if (fn.isMutableObject(state)) {
	          return fn.assign({}, state);
	        }

	        return state;
	      }

	      return getState;
	    }(),
	    setState: function () {
	      function setState(currentState, nextState) {
	        if (fn.isMutableObject(nextState)) {
	          return fn.assign(currentState, nextState);
	        }
	        return nextState;
	      }

	      return setState;
	    }()
	  }, globalConfig, StoreModel.config);
	}

	function transformStore(transforms, StoreModel) {
	  return transforms.reduce(function (Store, transform) {
	    return transform(Store);
	  }, StoreModel);
	}

	function createStoreFromObject(alt, StoreModel, key) {
	  var storeInstance = void 0;

	  var StoreProto = createPrototype({}, alt, key, fn.assign({
	    getInstance: function () {
	      function getInstance() {
	        return storeInstance;
	      }

	      return getInstance;
	    }(),
	    setState: function () {
	      function setState(nextState) {
	        doSetState(this, storeInstance, nextState);
	      }

	      return setState;
	    }()
	  }, StoreModel));

	  // bind the store listeners
	  /* istanbul ignore else */
	  if (StoreProto.bindListeners) {
	    _StoreMixin2.default.bindListeners.call(StoreProto, StoreProto.bindListeners);
	  }
	  /* istanbul ignore else */
	  if (StoreProto.observe) {
	    _StoreMixin2.default.bindListeners.call(StoreProto, StoreProto.observe(alt));
	  }

	  // bind the lifecycle events
	  /* istanbul ignore else */
	  if (StoreProto.lifecycle) {
	    fn.eachObject(function (eventName, event) {
	      _StoreMixin2.default.on.call(StoreProto, eventName, event);
	    }, [StoreProto.lifecycle]);
	  }

	  // create the instance and fn.assign the public methods to the instance
	  storeInstance = fn.assign(new _AltStore2.default(alt, StoreProto, StoreProto.state !== undefined ? StoreProto.state : {}, StoreModel), StoreProto.publicMethods, {
	    displayName: key,
	    config: StoreModel.config
	  });

	  return storeInstance;
	}

	function createStoreFromClass(alt, StoreModel, key) {
	  var storeInstance = void 0;
	  var config = StoreModel.config;

	  // Creating a class here so we don't overload the provided store's
	  // prototype with the mixin behaviour and I'm extending from StoreModel
	  // so we can inherit any extensions from the provided store.

	  var Store = function (_StoreModel) {
	    _inherits(Store, _StoreModel);

	    function Store() {
	      _classCallCheck(this, Store);

	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      return _possibleConstructorReturn(this, _StoreModel.call.apply(_StoreModel, [this].concat(args)));
	    }

	    return Store;
	  }(StoreModel);

	  createPrototype(Store.prototype, alt, key, {
	    type: 'AltStore',
	    getInstance: function () {
	      function getInstance() {
	        return storeInstance;
	      }

	      return getInstance;
	    }(),
	    setState: function () {
	      function setState(nextState) {
	        doSetState(this, storeInstance, nextState);
	      }

	      return setState;
	    }()
	  });

	  for (var _len = arguments.length, argsForClass = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	    argsForClass[_key - 3] = arguments[_key];
	  }

	  var store = new (Function.prototype.bind.apply(Store, [null].concat(argsForClass)))();

	  /* istanbul ignore next */
	  if (config.bindListeners) store.bindListeners(config.bindListeners);
	  /* istanbul ignore next */
	  if (config.datasource) store.registerAsync(config.datasource);

	  storeInstance = fn.assign(new _AltStore2.default(alt, store, store.state !== undefined ? store.state : store, StoreModel), utils.getInternalMethods(StoreModel), config.publicMethods, { displayName: key });

	  return storeInstance;
	}

/***/ },

/***/ 231:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getInternalMethods = getInternalMethods;
	exports.getPrototypeChain = getPrototypeChain;
	exports.warn = warn;
	exports.uid = uid;
	exports.formatAsConstant = formatAsConstant;
	exports.dispatchIdentity = dispatchIdentity;
	exports.fsa = fsa;
	exports.dispatch = dispatch;

	var _functions = __webpack_require__(229);

	var fn = _interopRequireWildcard(_functions);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/*eslint-disable*/
	var builtIns = Object.getOwnPropertyNames(NoopClass);
	var builtInProto = Object.getOwnPropertyNames(NoopClass.prototype);
	/*eslint-enable*/

	function getInternalMethods(Obj, isProto) {
	  var excluded = isProto ? builtInProto : builtIns;
	  var obj = isProto ? Obj.prototype : Obj;
	  return Object.getOwnPropertyNames(obj).reduce(function (value, m) {
	    if (excluded.indexOf(m) !== -1) {
	      return value;
	    }

	    value[m] = obj[m];
	    return value;
	  }, {});
	}

	function getPrototypeChain(Obj) {
	  var methods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  return Obj === Function.prototype ? methods : getPrototypeChain(Object.getPrototypeOf(Obj), fn.assign(methods, getInternalMethods(Obj, true)));
	}

	function warn(msg) {
	  /* istanbul ignore else */
	  /*eslint-disable*/
	  if (typeof console !== 'undefined') {
	    console.warn(new ReferenceError(msg));
	  }
	  /*eslint-enable*/
	}

	function uid(container, name) {
	  var count = 0;
	  var key = name;
	  while (Object.hasOwnProperty.call(container, key)) {
	    key = name + String(++count);
	  }
	  return key;
	}

	function formatAsConstant(name) {
	  return name.replace(/[a-z]([A-Z])/g, function (i) {
	    return String(i[0]) + '_' + String(i[1].toLowerCase());
	  }).toUpperCase();
	}

	function dispatchIdentity(x) {
	  if (x === undefined) return null;

	  for (var _len = arguments.length, a = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    a[_key - 1] = arguments[_key];
	  }

	  return a.length ? [x].concat(a) : x;
	}

	function fsa(id, type, payload, details) {
	  return {
	    type: type,
	    payload: payload,
	    meta: _extends({
	      dispatchId: id
	    }, details),

	    id: id,
	    action: type,
	    data: payload,
	    details: details
	  };
	}

	function dispatch(id, actionObj, payload, alt) {
	  var data = actionObj.dispatch(payload);
	  if (data === undefined) return null;

	  var type = actionObj.id;
	  var namespace = type;
	  var name = type;
	  var details = { id: type, namespace: namespace, name: name };

	  var dispatchLater = function dispatchLater(x) {
	    return alt.dispatch(type, x, details);
	  };

	  if (fn.isFunction(data)) return data(dispatchLater, alt);

	  // XXX standardize this
	  return alt.dispatcher.dispatch(fsa(id, type, data, details));
	}

	/* istanbul ignore next */
	function NoopClass() {}

/***/ },

/***/ 232:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _functions = __webpack_require__(229);

	var fn = _interopRequireWildcard(_functions);

	var _transmitter = __webpack_require__(233);

	var _transmitter2 = _interopRequireDefault(_transmitter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var AltStore = function () {
	  function AltStore(alt, model, state, StoreModel) {
	    var _this = this;

	    _classCallCheck(this, AltStore);

	    var lifecycleEvents = model.lifecycleEvents;
	    this.transmitter = (0, _transmitter2.default)();
	    this.lifecycle = function (event, x) {
	      if (lifecycleEvents[event]) lifecycleEvents[event].publish(x);
	    };
	    this.state = state;

	    this.alt = alt;
	    this.preventDefault = false;
	    this.displayName = model.displayName;
	    this.boundListeners = model.boundListeners;
	    this.StoreModel = StoreModel;
	    this.reduce = model.reduce || function (x) {
	      return x;
	    };
	    this.subscriptions = [];

	    var output = model.output || function (x) {
	      return x;
	    };

	    this.emitChange = function () {
	      return _this.transmitter.publish(output(_this.state));
	    };

	    var handleDispatch = function handleDispatch(f, payload) {
	      try {
	        return f();
	      } catch (e) {
	        if (model.handlesOwnErrors) {
	          _this.lifecycle('error', {
	            error: e,
	            payload: payload,
	            state: _this.state
	          });
	          return false;
	        }

	        throw e;
	      }
	    };

	    fn.assign(this, model.publicMethods);

	    // Register dispatcher
	    this.dispatchToken = alt.dispatcher.register(function (payload) {
	      _this.preventDefault = false;

	      _this.lifecycle('beforeEach', {
	        payload: payload,
	        state: _this.state
	      });

	      var actionHandlers = model.actionListeners[payload.action];

	      if (actionHandlers || model.otherwise) {
	        var result = void 0;

	        if (actionHandlers) {
	          result = handleDispatch(function () {
	            return actionHandlers.filter(Boolean).every(function (handler) {
	              return handler.call(model, payload.data, payload.action) !== false;
	            });
	          }, payload);
	        } else {
	          result = handleDispatch(function () {
	            return model.otherwise(payload.data, payload.action);
	          }, payload);
	        }

	        if (result !== false && !_this.preventDefault) _this.emitChange();
	      }

	      if (model.reduce) {
	        handleDispatch(function () {
	          var value = model.reduce(_this.state, payload);
	          if (value !== undefined) _this.state = value;
	        }, payload);
	        if (!_this.preventDefault) _this.emitChange();
	      }

	      _this.lifecycle('afterEach', {
	        payload: payload,
	        state: _this.state
	      });
	    });

	    this.lifecycle('init');
	  }

	  AltStore.prototype.listen = function () {
	    function listen(cb) {
	      var _this2 = this;

	      if (!fn.isFunction(cb)) throw new TypeError('listen expects a function');

	      var _transmitter$subscrib = this.transmitter.subscribe(cb);

	      var dispose = _transmitter$subscrib.dispose;

	      this.subscriptions.push({ cb: cb, dispose: dispose });
	      return function () {
	        _this2.lifecycle('unlisten');
	        dispose();
	      };
	    }

	    return listen;
	  }();

	  AltStore.prototype.unlisten = function () {
	    function unlisten(cb) {
	      this.lifecycle('unlisten');
	      this.subscriptions.filter(function (subscription) {
	        return subscription.cb === cb;
	      }).forEach(function (subscription) {
	        return subscription.dispose();
	      });
	    }

	    return unlisten;
	  }();

	  AltStore.prototype.getState = function () {
	    function getState() {
	      return this.StoreModel.config.getState.call(this, this.state);
	    }

	    return getState;
	  }();

	  return AltStore;
	}();

	exports.default = AltStore;
	module.exports = exports['default'];

/***/ },

/***/ 233:
/***/ function(module, exports) {

	"use strict";

	function transmitter() {
	  var subscriptions = [];
	  var nowDispatching = false;
	  var toUnsubscribe = {};

	  var unsubscribe = function unsubscribe(onChange) {
	    var id = subscriptions.indexOf(onChange);
	    if (id < 0) return;
	    if (nowDispatching) {
	      toUnsubscribe[id] = onChange;
	      return;
	    }
	    subscriptions.splice(id, 1);
	  };

	  var subscribe = function subscribe(onChange) {
	    var id = subscriptions.push(onChange);
	    var dispose = function dispose() {
	      return unsubscribe(onChange);
	    };
	    return { dispose: dispose };
	  };

	  var publish = function publish() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    nowDispatching = true;
	    try {
	      subscriptions.forEach(function (subscription, id) {
	        return toUnsubscribe[id] || subscription.apply(undefined, args);
	      });
	    } finally {
	      nowDispatching = false;
	      Object.keys(toUnsubscribe).forEach(function (id) {
	        return unsubscribe(toUnsubscribe[id]);
	      });
	      toUnsubscribe = {};
	    }
	  };

	  return {
	    publish: publish,
	    subscribe: subscribe,
	    $subscriptions: subscriptions
	  };
	}

	module.exports = transmitter;

/***/ },

/***/ 234:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _transmitter = __webpack_require__(233);

	var _transmitter2 = _interopRequireDefault(_transmitter);

	var _functions = __webpack_require__(229);

	var fn = _interopRequireWildcard(_functions);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var StoreMixin = {
	  waitFor: function () {
	    function waitFor() {
	      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
	        sources[_key] = arguments[_key];
	      }

	      if (!sources.length) {
	        throw new ReferenceError('Dispatch tokens not provided');
	      }

	      var sourcesArray = sources;
	      if (sources.length === 1) {
	        sourcesArray = Array.isArray(sources[0]) ? sources[0] : sources;
	      }

	      var tokens = sourcesArray.map(function (source) {
	        return source.dispatchToken || source;
	      });

	      this.dispatcher.waitFor(tokens);
	    }

	    return waitFor;
	  }(),
	  exportAsync: function () {
	    function exportAsync(asyncMethods) {
	      this.registerAsync(asyncMethods);
	    }

	    return exportAsync;
	  }(),
	  registerAsync: function () {
	    function registerAsync(asyncDef) {
	      var _this = this;

	      var loadCounter = 0;

	      var asyncMethods = fn.isFunction(asyncDef) ? asyncDef(this.alt) : asyncDef;

	      var toExport = Object.keys(asyncMethods).reduce(function (publicMethods, methodName) {
	        var desc = asyncMethods[methodName];
	        var spec = fn.isFunction(desc) ? desc(_this) : desc;

	        var validHandlers = ['success', 'error', 'loading'];
	        validHandlers.forEach(function (handler) {
	          if (spec[handler] && !spec[handler].id) {
	            throw new Error(String(handler) + ' handler must be an action function');
	          }
	        });

	        publicMethods[methodName] = function () {
	          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	            args[_key2] = arguments[_key2];
	          }

	          var state = _this.getInstance().getState();
	          var value = spec.local && spec.local.apply(spec, [state].concat(args));
	          var shouldFetch = spec.shouldFetch ? spec.shouldFetch.apply(spec, [state].concat(args))
	          /*eslint-disable*/
	          : value == null;
	          /*eslint-enable*/
	          var intercept = spec.interceptResponse || function (x) {
	            return x;
	          };

	          var makeActionHandler = function () {
	            function makeActionHandler(action, isError) {
	              return function (x) {
	                var fire = function () {
	                  function fire() {
	                    loadCounter -= 1;
	                    action(intercept(x, action, args));
	                    if (isError) throw x;
	                    return x;
	                  }

	                  return fire;
	                }();
	                return _this.alt.trapAsync ? function () {
	                  return fire();
	                } : fire();
	              };
	            }

	            return makeActionHandler;
	          }();

	          // if we don't have it in cache then fetch it
	          if (shouldFetch) {
	            loadCounter += 1;
	            /* istanbul ignore else */
	            if (spec.loading) spec.loading(intercept(null, spec.loading, args));
	            return spec.remote.apply(spec, [state].concat(args)).then(makeActionHandler(spec.success), makeActionHandler(spec.error, 1));
	          }

	          // otherwise emit the change now
	          _this.emitChange();
	          return value;
	        };

	        return publicMethods;
	      }, {});

	      this.exportPublicMethods(toExport);
	      this.exportPublicMethods({
	        isLoading: function () {
	          function isLoading() {
	            return loadCounter > 0;
	          }

	          return isLoading;
	        }()
	      });
	    }

	    return registerAsync;
	  }(),
	  exportPublicMethods: function () {
	    function exportPublicMethods(methods) {
	      var _this2 = this;

	      fn.eachObject(function (methodName, value) {
	        if (!fn.isFunction(value)) {
	          throw new TypeError('exportPublicMethods expects a function');
	        }

	        _this2.publicMethods[methodName] = value;
	      }, [methods]);
	    }

	    return exportPublicMethods;
	  }(),
	  emitChange: function () {
	    function emitChange() {
	      this.getInstance().emitChange();
	    }

	    return emitChange;
	  }(),
	  on: function () {
	    function on(lifecycleEvent, handler) {
	      if (lifecycleEvent === 'error') this.handlesOwnErrors = true;
	      var bus = this.lifecycleEvents[lifecycleEvent] || (0, _transmitter2.default)();
	      this.lifecycleEvents[lifecycleEvent] = bus;
	      return bus.subscribe(handler.bind(this));
	    }

	    return on;
	  }(),
	  bindAction: function () {
	    function bindAction(symbol, handler) {
	      if (!symbol) {
	        throw new ReferenceError('Invalid action reference passed in');
	      }
	      if (!fn.isFunction(handler)) {
	        throw new TypeError('bindAction expects a function');
	      }

	      // You can pass in the constant or the function itself
	      var key = symbol.id ? symbol.id : symbol;
	      this.actionListeners[key] = this.actionListeners[key] || [];
	      this.actionListeners[key].push(handler.bind(this));
	      this.boundListeners.push(key);
	    }

	    return bindAction;
	  }(),
	  bindActions: function () {
	    function bindActions(actions) {
	      var _this3 = this;

	      fn.eachObject(function (action, symbol) {
	        var matchFirstCharacter = /./;
	        var assumedEventHandler = action.replace(matchFirstCharacter, function (x) {
	          return 'on' + String(x[0].toUpperCase());
	        });

	        if (_this3[action] && _this3[assumedEventHandler]) {
	          // If you have both action and onAction
	          throw new ReferenceError('You have multiple action handlers bound to an action: ' + (String(action) + ' and ' + String(assumedEventHandler)));
	        }

	        var handler = _this3[action] || _this3[assumedEventHandler];
	        if (handler) {
	          _this3.bindAction(symbol, handler);
	        }
	      }, [actions]);
	    }

	    return bindActions;
	  }(),
	  bindListeners: function () {
	    function bindListeners(obj) {
	      var _this4 = this;

	      fn.eachObject(function (methodName, symbol) {
	        var listener = _this4[methodName];

	        if (!listener) {
	          throw new ReferenceError(String(methodName) + ' defined but does not exist in ' + String(_this4.displayName));
	        }

	        if (Array.isArray(symbol)) {
	          symbol.forEach(function (action) {
	            _this4.bindAction(action, listener);
	          });
	        } else {
	          _this4.bindAction(symbol, listener);
	        }
	      }, [obj]);
	    }

	    return bindListeners;
	  }()
	};

	exports.default = StoreMixin;
	module.exports = exports['default'];

/***/ },

/***/ 235:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = makeAction;

	var _functions = __webpack_require__(229);

	var fn = _interopRequireWildcard(_functions);

	var _AltUtils = __webpack_require__(231);

	var utils = _interopRequireWildcard(_AltUtils);

	var _isPromise = __webpack_require__(236);

	var _isPromise2 = _interopRequireDefault(_isPromise);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function makeAction(alt, namespace, name, implementation, obj) {
	  var id = utils.uid(alt._actionsRegistry, String(namespace) + '.' + String(name));
	  alt._actionsRegistry[id] = 1;

	  var data = { id: id, namespace: namespace, name: name };

	  var dispatch = function dispatch(payload) {
	    return alt.dispatch(id, payload, data);
	  };

	  // the action itself
	  var action = function action() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var invocationResult = implementation.apply(obj, args);
	    var actionResult = invocationResult;

	    // async functions that return promises should not be dispatched
	    if (invocationResult !== undefined && !(0, _isPromise2.default)(invocationResult)) {
	      if (fn.isFunction(invocationResult)) {
	        // inner function result should be returned as an action result
	        actionResult = invocationResult(dispatch, alt);
	      } else {
	        dispatch(invocationResult);
	      }
	    }

	    if (invocationResult === undefined) {
	      utils.warn('An action was called but nothing was dispatched');
	    }

	    return actionResult;
	  };
	  action.defer = function () {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    return setTimeout(function () {
	      return action.apply(null, args);
	    });
	  };
	  action.id = id;
	  action.data = data;

	  // ensure each reference is unique in the namespace
	  var container = alt.actions[namespace];
	  var namespaceId = utils.uid(container, name);
	  container[namespaceId] = action;

	  // generate a constant
	  var constant = utils.formatAsConstant(namespaceId);
	  container[constant] = id;

	  return action;
	}
	module.exports = exports['default'];

/***/ },

/***/ 236:
/***/ function(module, exports) {

	module.exports = isPromise;

	function isPromise(obj) {
	  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
	}


/***/ },

/***/ 237:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.decorate = decorate;
	exports.createActions = createActions;
	exports.createStore = createStore;
	exports.bind = bind;
	exports.bindWithContext = bindWithContext;
	exports.expose = expose;
	exports.datasource = datasource;

	var _functions = __webpack_require__(238);

	/* istanbul ignore next */
	function NoopClass() {}
	var builtInProto = Object.getOwnPropertyNames(NoopClass.prototype);

	function addMeta(description, decoration) {
	  description.value.alt = description.value.alt || {};
	  (0, _functions.assign)(description.value.alt, decoration);
	  return description;
	}

	function decorate(context) {
	  return function (Store) {
	    var proto = Store.prototype;
	    var publicMethods = {};
	    var bindListeners = {};

	    Object.getOwnPropertyNames(proto).forEach(function (name) {
	      if (builtInProto.indexOf(name) !== -1) return;

	      var meta = proto[name].alt;
	      if (!meta) {
	        return;
	      }

	      /* istanbul ignore else */
	      if (meta.actions) {
	        bindListeners[name] = meta.actions;
	      } else if (meta.actionsWithContext) {
	        bindListeners[name] = meta.actionsWithContext(context);
	      } else if (meta.publicMethod) {
	        publicMethods[name] = proto[name];
	      }
	    });

	    Store.config = (0, _functions.assign)({
	      bindListeners: bindListeners,
	      publicMethods: publicMethods
	    }, Store.config);

	    return Store;
	  };
	}

	function createActions(alt) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  return function (Actions) {
	    return alt.createActions.apply(alt, [Actions, {}].concat(args));
	  };
	}

	function createStore(alt) {
	  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    args[_key2 - 1] = arguments[_key2];
	  }

	  return function (Store) {
	    return alt.createStore.apply(alt, [decorate(alt)(Store), undefined].concat(args));
	  };
	}

	function bind() {
	  for (var _len3 = arguments.length, actionIds = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    actionIds[_key3] = arguments[_key3];
	  }

	  return function (obj, name, description) {
	    return addMeta(description, { actions: actionIds });
	  };
	}

	function bindWithContext(fn) {
	  return function (obj, name, description) {
	    return addMeta(description, { actionsWithContext: fn });
	  };
	}

	function expose(obj, name, description) {
	  return addMeta(description, { publicMethod: true });
	}

	function datasource() {
	  var source = _functions.assign.apply(undefined, arguments);
	  return function (Store) {
	    Store.config = (0, _functions.assign)({ datasource: source }, Store.config);
	    return Store;
	  };
	}

/***/ },

/***/ 238:
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.isPojo = isPojo;
	exports.isPromise = isPromise;
	exports.eachObject = eachObject;
	exports.assign = assign;
	var isFunction = function isFunction(x) {
	  return typeof x === 'function';
	};

	exports.isFunction = isFunction;

	function isPojo(target) {
	  var Ctor = target.constructor;

	  return !!target && typeof target === 'object' && Object.prototype.toString.call(target) === '[object Object]' && isFunction(Ctor) && (Ctor instanceof Ctor || target.type === 'AltStore');
	}

	function isPromise(obj) {
	  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
	}

	function eachObject(f, o) {
	  o.forEach(function (from) {
	    Object.keys(Object(from)).forEach(function (key) {
	      f(key, from[key]);
	    });
	  });
	}

	function assign(target) {
	  for (var _len = arguments.length, source = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    source[_key - 1] = arguments[_key];
	  }

	  eachObject(function (key, value) {
	    return target[key] = value;
	  }, source);
	  return target;
	}

/***/ },

/***/ 245:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _floatingNav = __webpack_require__(246);

	var _floatingNav2 = _interopRequireDefault(_floatingNav);

	var _searchBar = __webpack_require__(247);

	var _searchBar2 = _interopRequireDefault(_searchBar);

	var _addUsersButton = __webpack_require__(248);

	var _addUsersButton2 = _interopRequireDefault(_addUsersButton);

	var _employeeTable = __webpack_require__(249);

	var _employeeTable2 = _interopRequireDefault(_employeeTable);

	var _infoPanel = __webpack_require__(252);

	var _infoPanel2 = _interopRequireDefault(_infoPanel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var HRDashboard = function (_Component) {
	    _inherits(HRDashboard, _Component);

	    function HRDashboard(props) {
	        _classCallCheck(this, HRDashboard);

	        var _this = _possibleConstructorReturn(this, (HRDashboard.__proto__ || Object.getPrototypeOf(HRDashboard)).call(this, props));

	        _this.state = {
	            hideNav: false
	        };
	        return _this;
	    }

	    _createClass(HRDashboard, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            window.addEventListener('scroll', this.handleScroll.bind(this));
	        }
	    }, {
	        key: 'getScrollStateContainer',
	        value: function getScrollStateContainer() {
	            var result = "container";
	            if (this.state.hideNav) {
	                result += " scroll";
	            }
	            return result;
	        }
	    }, {
	        key: 'handleScroll',
	        value: function handleScroll() {
	            var scroll_top = $(window).scrollTop();
	            this.setState({
	                hideNav: scroll_top > 30
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: this.getScrollStateContainer() },
	                _react2.default.createElement(_floatingNav2.default, null),
	                _react2.default.createElement('div', { className: 'row margin-row' }),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'section' },
	                        _react2.default.createElement(
	                            'h5',
	                            { className: 'white-text' },
	                            'Welcome ',
	                            this.props.ProfileState.companyName
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row valign-wrapper' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'col m8 input-field valign' },
	                        _react2.default.createElement(_searchBar2.default, {
	                            searchAction: this.props.EmployeeSearchAction
	                        })
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'col m3 offset-m4' },
	                        _react2.default.createElement(_addUsersButton2.default, {
	                            editAction: this.props.EmployeeEditAction
	                        })
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'col m12' },
	                        _react2.default.createElement(_employeeTable2.default, {
	                            paginationCount: this.props.AppState.paginationCount,
	                            employees: this.props.AppState.employees,
	                            currentPage: this.props.AppState.page,
	                            employeeCount: this.props.AppState.employeeCount,
	                            searchAction: this.props.EmployeeSearchAction,
	                            searchQuery: this.props.AppState.searchQuery
	                        })
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'col s12' },
	                        _react2.default.createElement(
	                            'h4',
	                            { className: 'header' },
	                            'Participant Info'
	                        ),
	                        _react2.default.createElement(_infoPanel2.default, {
	                            employeeCount: this.props.AppState.employeeCount,
	                            dateSubscription: this.props.ProfileState.renewalDate
	                        })
	                    )
	                )
	            );
	        }
	    }]);

	    return HRDashboard;
	}(_react.Component);

	exports.default = HRDashboard;

/***/ },

/***/ 246:
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var FloatingNav = function (_Component) {
	    _inherits(FloatingNav, _Component);

	    function FloatingNav(props) {
	        _classCallCheck(this, FloatingNav);

	        return _possibleConstructorReturn(this, (FloatingNav.__proto__ || Object.getPrototypeOf(FloatingNav)).call(this, props));
	    }

	    _createClass(FloatingNav, [{
	        key: "render",
	        value: function render() {
	            return _react2.default.createElement(
	                "div",
	                { id: "header" },
	                _react2.default.createElement(
	                    "a",
	                    { id: "logo", href: "/" },
	                    _react2.default.createElement("img", { src: '/media/logo-symbol.png' })
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { id: "navigation" },
	                    _react2.default.createElement(
	                        "a",
	                        { href: "" },
	                        "Support"
	                    ),
	                    _react2.default.createElement(
	                        "a",
	                        { href: "", id: "nav-logout" },
	                        "Logout"
	                    )
	                )
	            );
	        }
	    }]);

	    return FloatingNav;
	}(_react.Component);

	exports.default = FloatingNav;

/***/ },

/***/ 247:
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SearchBar = function (_Component) {
	    _inherits(SearchBar, _Component);

	    function SearchBar(props) {
	        _classCallCheck(this, SearchBar);

	        return _possibleConstructorReturn(this, (SearchBar.__proto__ || Object.getPrototypeOf(SearchBar)).call(this, props));
	    }

	    _createClass(SearchBar, [{
	        key: "search",
	        value: function search(e) {
	            e.preventDefault();
	            var value = this.refs.queryTextField.value;
	            this.props.searchAction.search(value);
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            return _react2.default.createElement(
	                "form",
	                { onSubmit: this.search.bind(this) },
	                _react2.default.createElement(
	                    "div",
	                    { className: "row" },
	                    _react2.default.createElement(
	                        "div",
	                        { className: "col m10" },
	                        _react2.default.createElement("input", { ref: "queryTextField", type: "text", placeholder: "Search employee by name" })
	                    ),
	                    _react2.default.createElement(
	                        "div",
	                        { className: "col m2" },
	                        _react2.default.createElement(
	                            "button",
	                            {
	                                type: "submit",
	                                className: "valign waves-effect waves-light btn-floating", id: "search-button" },
	                            _react2.default.createElement(
	                                "i",
	                                { className: "material-icons search-icon" },
	                                "search"
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return SearchBar;
	}(_react.Component);

	exports.default = SearchBar;

/***/ },

/***/ 248:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(34);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AddUsersButton = function (_Component) {
	    _inherits(AddUsersButton, _Component);

	    function AddUsersButton(props) {
	        _classCallCheck(this, AddUsersButton);

	        var _this = _possibleConstructorReturn(this, (AddUsersButton.__proto__ || Object.getPrototypeOf(AddUsersButton)).call(this, props));

	        _this.state = {
	            selectedOption: false,
	            isFileUpload: false,
	            didDropFile: false
	        };
	        return _this;
	    }

	    _createClass(AddUsersButton, [{
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            if (this.state.isFileUpload) {
	                var drEvent = $('.dropify').dropify({
	                    messages: {
	                        'default': "",
	                        "replace": "",
	                        'remove': 'Remove',
	                        'error': ''
	                    }
	                });

	                drEvent.on('dropify.afterClear', function (event, element) {
	                    this.setState({
	                        didDropFile: false
	                    });
	                }.bind(this));

	                drEvent.on('dropify.errors', function (event, element) {
	                    this.setState({
	                        didDropFile: false
	                    });
	                }.bind(this));
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            $('#add-employee-modal').modal({
	                complete: this.handleModalClose.bind(this)
	            });
	        }
	    }, {
	        key: 'handleModalClose',
	        value: function handleModalClose() {
	            this.setState({
	                selectedOption: false,
	                isFileUpload: false,
	                didDropFile: false
	            });
	        }
	    }, {
	        key: 'getContainer',
	        value: function getContainer() {
	            if (!this.state.selectedOption) {
	                return this.getSelectOptionContainer();
	            }
	            if (this.state.isFileUpload) {
	                return this.getFileUploadContainer();
	            } else {
	                return this.getSingleUploadContainer();
	            }
	        }
	    }, {
	        key: 'getSelectOptionContainer',
	        value: function getSelectOptionContainer() {

	            function uploadUserState() {
	                this.setState({
	                    selectedOption: true
	                });
	            }

	            function uploadFileState() {
	                this.setState({
	                    isFileUpload: true,
	                    selectedOption: true
	                });
	            }

	            return _react2.default.createElement(
	                'div',
	                { className: 'row' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'col m12' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'row' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'col m12 input-field' },
	                            _react2.default.createElement(
	                                'button',
	                                { onClick: uploadUserState.bind(this), className: 'waves-effect waves-light btn max-width' },
	                                'Add User By Email'
	                            )
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'row' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'col m12 input-field' },
	                            _react2.default.createElement(
	                                'button',
	                                { onClick: uploadFileState.bind(this), className: 'waves-effect waves-light btn max-width' },
	                                'Import File'
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }, {
	        key: 'uploadFile',
	        value: function uploadFile(e) {
	            e.preventDefault();
	            var file = _reactDom2.default.findDOMNode(this.refs.fileUploadInput).files[0];
	            this.props.editAction.createUserWithCSV(file);
	        }
	    }, {
	        key: 'getFileUploadContainer',
	        value: function getFileUploadContainer() {

	            function didChangeFileInput(event) {
	                this.setState({
	                    didDropFile: event.target.value != ""
	                });
	            }

	            function getButton(component) {
	                var cName = "waves-effect btn valign center-block max-width";
	                var bTitle = "Submit";
	                if (!component.state.didDropFile) {
	                    cName += " disabled";
	                    bTitle = "Drop and drop file or click to submit";
	                }
	                return _react2.default.createElement(
	                    'button',
	                    { type: 'submit', className: cName },
	                    bTitle
	                );
	            }

	            return _react2.default.createElement(
	                'form',
	                { onSubmit: this.uploadFile.bind(this) },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row valign-wrapper input-row-text' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'input-field col m12 valign center-block' },
	                        _react2.default.createElement('input', {
	                            name: 'employeeFile',
	                            ref: 'fileUploadInput',
	                            onChange: didChangeFileInput.bind(this),
	                            type: 'file',
	                            className: 'dropify',
	                            'data-allowed-file-extensions': 'csv'
	                        })
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row valign-wrapper input-row' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'input-field col m12 valign center-block' },
	                        getButton(this)
	                    )
	                )
	            );
	        }
	    }, {
	        key: 'getSingleUploadContainer',
	        value: function getSingleUploadContainer() {
	            return _react2.default.createElement(
	                'form',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row valign-wrapper input-row-text' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'input-field col m10 valign center-block' },
	                        _react2.default.createElement('input', { ref: 'username', placeholder: 'Email', id: 'email', name: 'email', type: 'text' }),
	                        _react2.default.createElement(
	                            'p',
	                            { className: 'grey-text small' },
	                            'Login info and instructions will be sent to the users email.'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row valign-wrapper input-row' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'input-field col m10 valign center-block' },
	                        _react2.default.createElement(
	                            'button',
	                            { type: 'submit', className: 'waves-effect btn valign center-block max-width' },
	                            'Submit'
	                        )
	                    )
	                )
	            );
	        }
	    }, {
	        key: 'getTitle',
	        value: function getTitle() {
	            if (!this.state.selectedOption) return "Select An Option";
	            if (this.state.isFileUpload) {
	                return "Upload CSV File";
	            } else {
	                return "Enter Employee Email";
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'button',
	                    { 'data-target': 'add-employee-modal', id: 'add-user-button', className: 'waves-effect waves-light btn' },
	                    'Add Users'
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { id: 'add-employee-modal', className: 'modal' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'modal-content' },
	                        _react2.default.createElement(
	                            'h4',
	                            null,
	                            this.getTitle()
	                        ),
	                        _react2.default.createElement('div', { className: 'divider' }),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'valign-wrapper' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'valign center-block max-width' },
	                                this.getContainer()
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return AddUsersButton;
	}(_react.Component);

	exports.default = AddUsersButton;

/***/ },

/***/ 249:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _employeeTableRow = __webpack_require__(250);

	var _employeeTableRow2 = _interopRequireDefault(_employeeTableRow);

	var _employeeTablePagination = __webpack_require__(251);

	var _employeeTablePagination2 = _interopRequireDefault(_employeeTablePagination);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var EmployeeTable = function (_Component) {
	    _inherits(EmployeeTable, _Component);

	    function EmployeeTable(props) {
	        _classCallCheck(this, EmployeeTable);

	        return _possibleConstructorReturn(this, (EmployeeTable.__proto__ || Object.getPrototypeOf(EmployeeTable)).call(this, props));
	    }

	    _createClass(EmployeeTable, [{
	        key: 'getTableRows',
	        value: function getTableRows() {
	            var results = [];
	            this.props.employees.forEach(function (employee) {
	                results.push(_react2.default.createElement(_employeeTableRow2.default, { employeeData: employee, key: employee.email }));
	            });
	            return results;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'card' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'card-stacked' },
	                    _react2.default.createElement(
	                        'div',
	                        { id: 'employee-table', className: 'card-content' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'col m12' },
	                                _react2.default.createElement(
	                                    'table',
	                                    { className: 'highlight' },
	                                    _react2.default.createElement(
	                                        'thead',
	                                        null,
	                                        _react2.default.createElement(
	                                            'tr',
	                                            null,
	                                            _react2.default.createElement(
	                                                'th',
	                                                { 'data-field': 'id' },
	                                                '#'
	                                            ),
	                                            _react2.default.createElement(
	                                                'th',
	                                                { 'data-field': 'email' },
	                                                'Email'
	                                            ),
	                                            _react2.default.createElement(
	                                                'th',
	                                                { 'data-field': 'status' },
	                                                'Status'
	                                            ),
	                                            _react2.default.createElement('th', { 'data-field': 'edit' })
	                                        )
	                                    ),
	                                    _react2.default.createElement(
	                                        'tbody',
	                                        null,
	                                        this.getTableRows()
	                                    )
	                                )
	                            )
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { id: 'pagination-container' },
	                        _react2.default.createElement(_employeeTablePagination2.default, {
	                            currentPage: this.props.currentPage,
	                            paginationCount: this.props.paginationCount,
	                            employeeCount: this.props.employees.length,
	                            totalCount: this.props.employeeCount,
	                            searchAction: this.props.searchAction,
	                            searchQuery: this.props.searchQuery
	                        })
	                    )
	                )
	            );
	        }
	    }]);

	    return EmployeeTable;
	}(_react.Component);

	exports.default = EmployeeTable;

/***/ },

/***/ 250:
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var EmployeeTableRow = function (_Component) {
	    _inherits(EmployeeTableRow, _Component);

	    function EmployeeTableRow(props) {
	        _classCallCheck(this, EmployeeTableRow);

	        return _possibleConstructorReturn(this, (EmployeeTableRow.__proto__ || Object.getPrototypeOf(EmployeeTableRow)).call(this, props));
	    }

	    _createClass(EmployeeTableRow, [{
	        key: "getActiveStatus",
	        value: function getActiveStatus() {
	            if (this.props.employeeData.is_active) {
	                return "Active";
	            }
	            return "Pending";
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            return _react2.default.createElement(
	                "tr",
	                null,
	                _react2.default.createElement(
	                    "td",
	                    null,
	                    this.props.employeeData.id
	                ),
	                _react2.default.createElement(
	                    "td",
	                    null,
	                    this.props.employeeData.email
	                ),
	                _react2.default.createElement(
	                    "td",
	                    null,
	                    this.getActiveStatus()
	                ),
	                _react2.default.createElement(
	                    "td",
	                    null,
	                    _react2.default.createElement(
	                        "a",
	                        { className: "waves-effect waves-light btn-floating" },
	                        _react2.default.createElement(
	                            "i",
	                            { className: "material-icons left" },
	                            "edit"
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return EmployeeTableRow;
	}(_react.Component);

	exports.default = EmployeeTableRow;

/***/ },

/***/ 251:
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var EmployeeTablePagination = function (_Component) {
	    _inherits(EmployeeTablePagination, _Component);

	    function EmployeeTablePagination(props) {
	        _classCallCheck(this, EmployeeTablePagination);

	        return _possibleConstructorReturn(this, (EmployeeTablePagination.__proto__ || Object.getPrototypeOf(EmployeeTablePagination)).call(this, props));
	    }

	    _createClass(EmployeeTablePagination, [{
	        key: "getPaginationList",
	        value: function getPaginationList() {
	            var max = this.props.paginationCount;
	            var current = this.props.currentPage;
	            var size = 4;
	            var temp = [current];
	            for (var i = 0; i / 2 < size; i++) {
	                if (current + i + 1 <= max) {
	                    temp.push(current + i + 1);
	                }
	                if (current - i - 1 > 0) {
	                    temp.unshift(current - i - 1);
	                }
	            }

	            while (temp.length < 5 && temp.length < max + 1) {
	                if (temp[0] > 1) {
	                    temp.unshift(temp[0] - 1);
	                } else {
	                    temp.push(temp[temp.length - 1] + 1);
	                }
	            }

	            var result = [];

	            temp.forEach(function (i) {
	                var c = i == current ? "active" : "waves-effect";
	                result.push(_react2.default.createElement(
	                    "li",
	                    {
	                        className: c,
	                        key: i
	                    },
	                    _react2.default.createElement(
	                        "a",
	                        {
	                            onClick: this.changePage.bind(this, i)
	                        },
	                        i
	                    )
	                ));
	            }.bind(this));

	            return result;
	        }
	    }, {
	        key: "getEmployeeCount",
	        value: function getEmployeeCount() {
	            var result = " of ";

	            var count = this.props.employeeCount;
	            var totalCount = this.props.totalCount;
	            var page = this.props.currentPage;

	            var currentEmployeeCount = count * (100 * (page - 1)) + count;

	            result += currentEmployeeCount + result + totalCount;

	            return result;
	        }
	    }, {
	        key: "changePage",
	        value: function changePage(index) {
	            if (index <= 0 || index > this.props.paginationCount + 1) return;
	            this.props.searchAction.paginate(index, this.props.searchQuery);
	        }
	    }, {
	        key: "getNavigationClass",
	        value: function getNavigationClass(type) {
	            var max = this.props.paginationCount;
	            var current = this.props.currentPage;
	            if (type == "back" && current == 1) {
	                return "disabled";
	            }
	            if (type == "front" && current == max) {
	                return "disabled";
	            }
	            return "waves-effect";
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            return _react2.default.createElement(
	                "div",
	                { className: "row" },
	                _react2.default.createElement(
	                    "div",
	                    { className: "col m6" },
	                    _react2.default.createElement(
	                        "ul",
	                        { className: "pagination" },
	                        _react2.default.createElement(
	                            "li",
	                            { className: this.getNavigationClass("back") },
	                            _react2.default.createElement(
	                                "a",
	                                { onClick: this.changePage.bind(this, this.props.currentPage - 1) },
	                                _react2.default.createElement(
	                                    "i",
	                                    { className: "material-icons" },
	                                    "chevron_left"
	                                )
	                            )
	                        ),
	                        this.getPaginationList(),
	                        _react2.default.createElement(
	                            "li",
	                            { className: this.getNavigationClass("front") },
	                            _react2.default.createElement(
	                                "a",
	                                { onClick: this.changePage.bind(this, this.props.currentPage + 1) },
	                                _react2.default.createElement(
	                                    "i",
	                                    { className: "material-icons" },
	                                    "chevron_right"
	                                )
	                            )
	                        )
	                    ),
	                    _react2.default.createElement(
	                        "p",
	                        null,
	                        "Showing ",
	                        this.getEmployeeCount(),
	                        " employees"
	                    )
	                )
	            );
	        }
	    }]);

	    return EmployeeTablePagination;
	}(_react.Component);

	exports.default = EmployeeTablePagination;

/***/ },

/***/ 252:
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var InfoPanel = function (_Component) {
	    _inherits(InfoPanel, _Component);

	    function InfoPanel(props) {
	        _classCallCheck(this, InfoPanel);

	        return _possibleConstructorReturn(this, (InfoPanel.__proto__ || Object.getPrototypeOf(InfoPanel)).call(this, props));
	    }

	    _createClass(InfoPanel, [{
	        key: "getCost",
	        value: function getCost() {
	            var count = this.props.employeeCount * 12;
	            return count.toLocaleString();
	        }
	    }, {
	        key: "getRenewDate",
	        value: function getRenewDate() {
	            var subscriptionDate = new Date(this.props.dateSubscription);
	            subscriptionDate.setFullYear(subscriptionDate.getFullYear() + 1);
	            var today = new Date();
	            var result = Math.floor((subscriptionDate - today) / (1000 * 3600 * 24));
	            return 0 ? result <= 0 : result;
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            return _react2.default.createElement(
	                "div",
	                { className: "card-panel" },
	                _react2.default.createElement(
	                    "div",
	                    { className: "row" },
	                    _react2.default.createElement(
	                        "div",
	                        { className: "col s6" },
	                        _react2.default.createElement(
	                            "h1",
	                            { className: "center-align participant-info-header" },
	                            this.props.employeeCount
	                        )
	                    ),
	                    _react2.default.createElement(
	                        "div",
	                        { className: "col s6" },
	                        _react2.default.createElement(
	                            "h1",
	                            { className: "center-align participant-info-header" },
	                            this.getRenewDate()
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { className: "row" },
	                    _react2.default.createElement(
	                        "div",
	                        { className: "col s6" },
	                        _react2.default.createElement(
	                            "p",
	                            { className: "participant-info" },
	                            "Employees using Vestivise. "
	                        ),
	                        _react2.default.createElement(
	                            "p",
	                            { className: "participant-info" },
	                            "Costing $",
	                            this.getCost(),
	                            " per year."
	                        )
	                    ),
	                    _react2.default.createElement(
	                        "div",
	                        { className: "col s6" },
	                        _react2.default.createElement(
	                            "p",
	                            { className: "participant-info" },
	                            "Days until the next renewal date."
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return InfoPanel;
	}(_react.Component);

	exports.default = InfoPanel;

/***/ },

/***/ 253:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _desc, _value, _class2; /**
	                                                                                     * Created by raylenmargono on 12/6/16.
	                                                                                     */


	var _sources = __webpack_require__(254);

	var _actions = __webpack_require__(255);

	var _decorators = __webpack_require__(237);

	var _alt = __webpack_require__(223);

	var _alt2 = _interopRequireDefault(_alt);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	    var desc = {};
	    Object['ke' + 'ys'](descriptor).forEach(function (key) {
	        desc[key] = descriptor[key];
	    });
	    desc.enumerable = !!desc.enumerable;
	    desc.configurable = !!desc.configurable;

	    if ('value' in desc || desc.initializer) {
	        desc.writable = true;
	    }

	    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	        return decorator(target, property, desc) || desc;
	    }, desc);

	    if (context && desc.initializer !== void 0) {
	        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	        desc.initializer = undefined;
	    }

	    if (desc.initializer === void 0) {
	        Object['define' + 'Property'](target, property, desc);
	        desc = null;
	    }

	    return desc;
	}

	var HRDashboardStore = (_dec = (0, _decorators.createStore)(_alt2.default), _dec2 = (0, _decorators.datasource)(_sources.EmployeeSource), _dec3 = (0, _decorators.bind)(_actions.EmployeeSearchAction.loadingResults), _dec4 = (0, _decorators.bind)(_actions.EmployeeSearchAction.receivedResults), _dec5 = (0, _decorators.bind)(_actions.EmployeeSearchAction.fetchingResultsFailed), _dec6 = (0, _decorators.bind)(_actions.EmployeeSearchAction.paginate), _dec7 = (0, _decorators.bind)(_actions.EmployeeSearchAction.search), _dec(_class = _dec2(_class = (_class2 = function () {
	    function HRDashboardStore() {
	        _classCallCheck(this, HRDashboardStore);

	        this.state = {
	            searchQuery: "",
	            page: 1,
	            employees: [],
	            isLoading: false,
	            employeeCount: 0,
	            paginationCount: 0
	        };
	    }

	    _createClass(HRDashboardStore, [{
	        key: 'employeeSearchLoading',
	        value: function employeeSearchLoading(isLoading) {
	            this.setState({
	                isLoading: isLoading
	            });
	        }
	    }, {
	        key: 'employeeSearchResults',
	        value: function employeeSearchResults(payload) {
	            var data = payload.data;
	            var page = payload.page;
	            var query = payload.query;
	            this.setState({
	                isLoading: false,
	                employees: data['data'],
	                employeeCount: data['count'],
	                paginationCount: data['count'] < 100 ? 0 : data['count'] % 100,
	                page: page,
	                searchQuery: query
	            });
	        }
	    }, {
	        key: 'employeeSearchFailed',
	        value: function employeeSearchFailed(e) {
	            //alt.rollback();
	            this.setState({
	                isLoading: false
	            });
	        }
	    }, {
	        key: 'handlePagination',
	        value: function handlePagination(index) {
	            if (!this.getInstance().isLoading()) {
	                this.getInstance().performSearch(index);
	            }
	        }
	    }, {
	        key: 'handleQuery',
	        value: function handleQuery(query) {
	            if (!this.getInstance().isLoading()) {
	                this.getInstance().performSearch(1, query);
	            }
	        }
	    }]);

	    return HRDashboardStore;
	}(), (_applyDecoratedDescriptor(_class2.prototype, 'employeeSearchLoading', [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, 'employeeSearchLoading'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'employeeSearchResults', [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, 'employeeSearchResults'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'employeeSearchFailed', [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, 'employeeSearchFailed'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handlePagination', [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, 'handlePagination'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleQuery', [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleQuery'), _class2.prototype)), _class2)) || _class) || _class);
	exports.default = HRDashboardStore;

/***/ },

/***/ 254:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.EmployeeSource = exports.HRProfileSource = undefined;

	var _api = __webpack_require__(215);

	var _api2 = _interopRequireDefault(_api);

	var _actions = __webpack_require__(255);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Created by raylenmargono on 12/6/16.
	 */
	var EmployeeSource = {
	    performSearch: {
	        // remotely fetch something (required)
	        remote: function remote(state, page, searchQuery) {
	            var query = {
	                "page_size": "max",
	                "page": page,
	                "search_query": searchQuery
	            };
	            return _api2.default.get(Urls["companyEmployeeManagement-list"](), query);
	        },


	        // this function checks in our local cache first
	        // if the value is present it'll use that instead (optional).
	        // local(state) {
	        //     return state.results[state.value] ? state.results : null;
	        // },

	        // here we setup some actions to handle our response
	        loading: _actions.EmployeeSearchAction.loadingResults, // (optional)
	        success: _actions.EmployeeSearchAction.receivedResults, // (required)
	        error: _actions.EmployeeSearchAction.fetchingResultsFailed, // (required)

	        interceptResponse: function interceptResponse(data, action, args) {
	            if (!data) return null;
	            return {
	                data: data.body,
	                query: args[1],
	                page: args[0]
	            };
	        }
	    }
	};

	var HRProfileSource = {
	    performSearch: {
	        // remotely fetch something (required)
	        remote: function remote(state) {
	            return _api2.default.get(Urls.hrMe());
	        },


	        // this function checks in our local cache first
	        // if the value is present it'll use that instead (optional).
	        // local(state) {
	        //     return state.results[state.value] ? state.results : null;
	        // },

	        // here we setup some actions to handle our response
	        loading: _actions.HRProfileActions.loadingResults, // (optional)
	        success: _actions.HRProfileActions.receivedResults, // (required)
	        error: _actions.HRProfileActions.fetchingResultsFailed }
	};

	exports.HRProfileSource = HRProfileSource;
	exports.EmployeeSource = EmployeeSource;

/***/ },

/***/ 255:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.HRProfileActions = exports.EmployeeEditAction = exports.EmployeeSearchAction = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _dec, _class, _dec2, _class2, _dec3, _class3; /**
	                                                   * Created by raylenmargono on 12/6/16.
	                                                   */


	var _alt = __webpack_require__(223);

	var _alt2 = _interopRequireDefault(_alt);

	var _decorators = __webpack_require__(237);

	var _sources = __webpack_require__(254);

	var _api = __webpack_require__(215);

	var _api2 = _interopRequireDefault(_api);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var EmployeeSearchAction = (_dec = (0, _decorators.createActions)(_alt2.default), _dec(_class = function () {
	    function EmployeeSearchAction() {
	        _classCallCheck(this, EmployeeSearchAction);
	    }

	    _createClass(EmployeeSearchAction, [{
	        key: 'paginate',
	        value: function paginate(index, query) {
	            console.warn = function () {};
	            this.loadingResults();
	            _sources.EmployeeSource.performSearch.remote(null, index, query).end(function (err, res) {
	                if (err) {
	                    this.fetchingResultsFailed(err);
	                } else {
	                    this.receivedResults({
	                        data: res.body,
	                        query: query,
	                        page: index
	                    });
	                }
	            }.bind(this));
	        }
	    }, {
	        key: 'search',
	        value: function search(query) {
	            console.warn = function () {};
	            this.loadingResults();
	            _sources.EmployeeSource.performSearch.remote(null, 1, query).end(function (err, res) {
	                if (err) {
	                    this.fetchingResultsFailed(err);
	                } else {
	                    this.receivedResults({
	                        data: res.body,
	                        query: query,
	                        page: 1
	                    });
	                }
	            }.bind(this));
	        }
	    }, {
	        key: 'loadingResults',
	        value: function loadingResults() {
	            return true;
	        }
	    }, {
	        key: 'receivedResults',
	        value: function receivedResults(data) {
	            return data;
	        }
	    }, {
	        key: 'fetchingResultsFailed',
	        value: function fetchingResultsFailed(data) {
	            return data;
	        }
	    }]);

	    return EmployeeSearchAction;
	}()) || _class);
	var EmployeeEditAction = (_dec2 = (0, _decorators.createActions)(_alt2.default), _dec2(_class2 = function () {
	    function EmployeeEditAction() {
	        _classCallCheck(this, EmployeeEditAction);
	    }

	    _createClass(EmployeeEditAction, [{
	        key: 'createUserWithCSV',
	        value: function createUserWithCSV(file) {
	            var formData = new FormData();
	            formData.append('csv_file', file);
	            _api2.default.post(Urls.employeeCreateCSV(), formData).end(function (err, res) {
	                if (err) {} else {}
	            });
	        }
	    }]);

	    return EmployeeEditAction;
	}()) || _class2);
	var HRProfileActions = (_dec3 = (0, _decorators.createActions)(_alt2.default), _dec3(_class3 = function () {
	    function HRProfileActions() {
	        _classCallCheck(this, HRProfileActions);
	    }

	    _createClass(HRProfileActions, [{
	        key: 'loadingResults',
	        value: function loadingResults() {
	            return true;
	        }
	    }, {
	        key: 'receivedResults',
	        value: function receivedResults(data) {
	            return data.body;
	        }
	    }, {
	        key: 'fetchingResultsFailed',
	        value: function fetchingResultsFailed(data) {
	            return data.body;
	        }
	    }]);

	    return HRProfileActions;
	}()) || _class3);
	exports.EmployeeSearchAction = EmployeeSearchAction;
	exports.EmployeeEditAction = EmployeeEditAction;
	exports.HRProfileActions = HRProfileActions;

/***/ },

/***/ 256:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _dec, _dec2, _dec3, _dec4, _dec5, _class, _desc, _value, _class2;

	var _sources = __webpack_require__(254);

	var _actions = __webpack_require__(255);

	var _decorators = __webpack_require__(237);

	var _alt = __webpack_require__(223);

	var _alt2 = _interopRequireDefault(_alt);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	    var desc = {};
	    Object['ke' + 'ys'](descriptor).forEach(function (key) {
	        desc[key] = descriptor[key];
	    });
	    desc.enumerable = !!desc.enumerable;
	    desc.configurable = !!desc.configurable;

	    if ('value' in desc || desc.initializer) {
	        desc.writable = true;
	    }

	    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	        return decorator(target, property, desc) || desc;
	    }, desc);

	    if (context && desc.initializer !== void 0) {
	        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	        desc.initializer = undefined;
	    }

	    if (desc.initializer === void 0) {
	        Object['define' + 'Property'](target, property, desc);
	        desc = null;
	    }

	    return desc;
	}

	var HRProfileStore = (_dec = (0, _decorators.createStore)(_alt2.default), _dec2 = (0, _decorators.datasource)(_sources.HRProfileSource), _dec3 = (0, _decorators.bind)(_actions.HRProfileActions.loadingResults), _dec4 = (0, _decorators.bind)(_actions.HRProfileActions.receivedResults), _dec5 = (0, _decorators.bind)(_actions.HRProfileActions.fetchingResultsFailed), _dec(_class = _dec2(_class = (_class2 = function () {
	    function HRProfileStore() {
	        _classCallCheck(this, HRProfileStore);

	        this.state = {
	            companyName: "",
	            isLoading: false,
	            renewalDate: null
	        };
	    }

	    _createClass(HRProfileStore, [{
	        key: 'profileSearchLoading',
	        value: function profileSearchLoading(isLoading) {
	            this.setState({
	                isLoading: isLoading
	            });
	        }
	    }, {
	        key: 'profileSearchResults',
	        value: function profileSearchResults(payload) {
	            this.setState({
	                isLoading: false,
	                companyName: payload.company,
	                renewalDate: payload.subscription_date
	            });
	        }
	    }, {
	        key: 'profileSearchFailed',
	        value: function profileSearchFailed(e) {
	            //alt.rollback();
	            this.setState({
	                isLoading: false
	            });
	        }
	    }]);

	    return HRProfileStore;
	}(), (_applyDecoratedDescriptor(_class2.prototype, 'profileSearchLoading', [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, 'profileSearchLoading'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'profileSearchResults', [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, 'profileSearchResults'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'profileSearchFailed', [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, 'profileSearchFailed'), _class2.prototype)), _class2)) || _class) || _class);
	exports.default = HRProfileStore;

/***/ }

/******/ });